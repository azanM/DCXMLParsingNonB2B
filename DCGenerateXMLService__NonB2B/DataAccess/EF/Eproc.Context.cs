//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DCGenerateXMLService__NonB2B.DataAccess.EF
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class eprocEntities : DbContext
    {
        public eprocEntities()
            : base("name=eprocEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Company_Code> Company_Code { get; set; }
        public DbSet<CUSTOM_DOWNLOAD_TRANSACTION> CUSTOM_DOWNLOAD_TRANSACTION { get; set; }
        public DbSet<CUSTOM_DOWNLOAD_TRANSACTIONDATA> CUSTOM_DOWNLOAD_TRANSACTIONDATA { get; set; }
        public DbSet<CUSTOM_DOWNLOAD_TRANSACTIONDATADETAIL> CUSTOM_DOWNLOAD_TRANSACTIONDATADETAIL { get; set; }
        public DbSet<CUSTOM_LOG> CUSTOM_LOG { get; set; }
        public DbSet<CUSTOM_S02001_HS> CUSTOM_S02001_HS { get; set; }
        public DbSet<CUSTOM_S02001_IS> CUSTOM_S02001_IS { get; set; }
        public DbSet<CUSTOM_S02001_TEMP_HS> CUSTOM_S02001_TEMP_HS { get; set; }
        public DbSet<CUSTOM_S02001_TEMP_IS> CUSTOM_S02001_TEMP_IS { get; set; }
        public DbSet<CUSTOM_S02002> CUSTOM_S02002 { get; set; }
        public DbSet<CUSTOM_S02003> CUSTOM_S02003 { get; set; }
        public DbSet<CUSTOM_S02003_TEMP> CUSTOM_S02003_TEMP { get; set; }
        public DbSet<CUSTOM_S02004> CUSTOM_S02004 { get; set; }
        public DbSet<CUSTOM_S02005_HS> CUSTOM_S02005_HS { get; set; }
        public DbSet<CUSTOM_S02005_IS> CUSTOM_S02005_IS { get; set; }
        public DbSet<CUSTOM_S02005_TEMP_HS> CUSTOM_S02005_TEMP_HS { get; set; }
        public DbSet<CUSTOM_S02005_TEMP_IS> CUSTOM_S02005_TEMP_IS { get; set; }
        public DbSet<CUSTOM_S02006> CUSTOM_S02006 { get; set; }
        public DbSet<CUSTOM_S02007> CUSTOM_S02007 { get; set; }
        public DbSet<CUSTOM_S02007_TEMP> CUSTOM_S02007_TEMP { get; set; }
        public DbSet<CUSTOM_S02008> CUSTOM_S02008 { get; set; }
        public DbSet<CUSTOM_S02009_HS> CUSTOM_S02009_HS { get; set; }
        public DbSet<CUSTOM_S02009_IS> CUSTOM_S02009_IS { get; set; }
        public DbSet<CUSTOM_S02009_TEMP_HS> CUSTOM_S02009_TEMP_HS { get; set; }
        public DbSet<CUSTOM_S02009_TEMP_IS> CUSTOM_S02009_TEMP_IS { get; set; }
        public DbSet<CUSTOM_TRANSACTION> CUSTOM_TRANSACTION { get; set; }
        public DbSet<CUSTOM_TRANSACTIONDATA> CUSTOM_TRANSACTIONDATA { get; set; }
        public DbSet<CUSTOM_TRANSACTIONDATADETAIL> CUSTOM_TRANSACTIONDATADETAIL { get; set; }
        public DbSet<CUSTOM_USER> CUSTOM_USER { get; set; }
        public DbSet<CUSTOM_VENDOR_TRANSACTION> CUSTOM_VENDOR_TRANSACTION { get; set; }
        public DbSet<CUSTOMBPKB> CUSTOMBPKBs { get; set; }
        public DbSet<CUSTOMCITY> CUSTOMCITies { get; set; }
        public DbSet<CUSTOMCOMPANY> CUSTOMCOMPANies { get; set; }
        public DbSet<CUSTOMFILEUPLOAD> CUSTOMFILEUPLOADs { get; set; }
        public DbSet<CUSTOMGR> CUSTOMGRs { get; set; }
        public DbSet<CUSTOMIR> CUSTOMIRs { get; set; }
        public DbSet<CUSTOMMISC> CUSTOMMISCs { get; set; }
        public DbSet<CUSTOMPR> CUSTOMPRs { get; set; }
        public DbSet<CUSTOMPROPOSALPAYMENT> CUSTOMPROPOSALPAYMENTs { get; set; }
        public DbSet<CUSTOMREGION> CUSTOMREGIONs { get; set; }
        public DbSet<CUSTOMSERATOAI> CUSTOMSERATOAIs { get; set; }
        public DbSet<CUSTOMSTATU> CUSTOMSTATUS { get; set; }
        public DbSet<Log_Aktifitas> Log_Aktifitas { get; set; }
        public DbSet<Log_Error> Log_Error { get; set; }
        public DbSet<Log_Login> Log_Login { get; set; }
        public DbSet<LogXMLParsing> LogXMLParsings { get; set; }
        public DbSet<Master_BentukKaroseri> Master_BentukKaroseri { get; set; }
        public DbSet<Master_Group> Master_Group { get; set; }
        public DbSet<Master_Menu> Master_Menu { get; set; }
        public DbSet<Master_User> Master_User { get; set; }
        public DbSet<Mgmt_Akses> Mgmt_Akses { get; set; }
        public DbSet<MSMATERIAL> MSMATERIALs { get; set; }
        public DbSet<MSPLANT> MSPLANTs { get; set; }
        public DbSet<MSSTORAGELOCATION> MSSTORAGELOCATIONs { get; set; }
        public DbSet<MSVENDOR> MSVENDORs { get; set; }
        public DbSet<SLUSER> SLUSERs { get; set; }
        public DbSet<STATUS_UPLOAD> STATUS_UPLOAD { get; set; }
        public DbSet<STATUS_UPLOADBPKB> STATUS_UPLOADBPKB { get; set; }
        public DbSet<STATUS_UPLOADDELIVERY> STATUS_UPLOADDELIVERY { get; set; }
        public DbSet<STATUS_UPLOADDETAIL> STATUS_UPLOADDETAIL { get; set; }
        public DbSet<STATUS_UPLOADREQUIREMENT> STATUS_UPLOADREQUIREMENT { get; set; }
        public DbSet<STREAMLINER> STREAMLINERs { get; set; }
        public DbSet<sysdiagram> sysdiagrams { get; set; }
        public DbSet<UPLOAD_FILE> UPLOAD_FILE { get; set; }
        public DbSet<VENDOR_GROUP> VENDOR_GROUP { get; set; }
        public DbSet<CUSTOMPO> CUSTOMPOes { get; set; }
        public DbSet<CUSTOMUPDATE> CUSTOMUPDATEs { get; set; }
        public DbSet<Master_Vendor> Master_Vendor { get; set; }
        public DbSet<REMINDER_LOG> REMINDER_LOG { get; set; }
        public DbSet<VENDORMAIL> VENDORMAILs { get; set; }
    
        [EdmFunction("eprocEntities", "fn_CountWeekDays")]
        public virtual IQueryable<fn_CountWeekDays_Result> fn_CountWeekDays(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_CountWeekDays_Result>("[eprocEntities].[fn_CountWeekDays](@fromdate, @todate)", fromdateParameter, todateParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual ObjectResult<sp_CancelPOSeraToAI_Result> sp_CancelPOSeraToAI()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CancelPOSeraToAI_Result>("sp_CancelPOSeraToAI");
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual ObjectResult<sp_CreatePOSeraS02009ToAI_HS_Result> sp_CreatePOSeraS02009ToAI_HS()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CreatePOSeraS02009ToAI_HS_Result>("sp_CreatePOSeraS02009ToAI_HS");
        }
    
        public virtual ObjectResult<sp_CreatePOSeras02009ToAI_IS_Result> sp_CreatePOSeras02009ToAI_IS()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CreatePOSeras02009ToAI_IS_Result>("sp_CreatePOSeras02009ToAI_IS");
        }
    
        public virtual ObjectResult<sp_CreatePOSeraToAI_HS_Result> sp_CreatePOSeraToAI_HS()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CreatePOSeraToAI_HS_Result>("sp_CreatePOSeraToAI_HS");
        }
    
        public virtual ObjectResult<sp_CreatePOSeraToAI_IS_Result> sp_CreatePOSeraToAI_IS()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CreatePOSeraToAI_IS_Result>("sp_CreatePOSeraToAI_IS");
        }
    
        public virtual int sp_DeleteAllTempHSISS02001()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteAllTempHSISS02001");
        }
    
        public virtual int sp_DeleteAllTempHSISS02005()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteAllTempHSISS02005");
        }
    
        public virtual int sp_DeleteAllTempHSISS02009()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteAllTempHSISS02009");
        }
    
        public virtual int sp_DeleteAllTempHSS02003()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteAllTempHSS02003");
        }
    
        public virtual int sp_DeleteAllTempHSS02007()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteAllTempHSS02007");
        }
    
        public virtual int sp_DeleteTempHS(string pONUMBER)
        {
            var pONUMBERParameter = pONUMBER != null ?
                new ObjectParameter("PONUMBER", pONUMBER) :
                new ObjectParameter("PONUMBER", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteTempHS", pONUMBERParameter);
        }
    
        public virtual int sp_DeleteTempHS_s02009(string pONUMBER)
        {
            var pONUMBERParameter = pONUMBER != null ?
                new ObjectParameter("PONUMBER", pONUMBER) :
                new ObjectParameter("PONUMBER", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteTempHS_s02009", pONUMBERParameter);
        }
    
        public virtual int sp_DeleteTempHSS02003(string pONUMBER)
        {
            var pONUMBERParameter = pONUMBER != null ?
                new ObjectParameter("PONUMBER", pONUMBER) :
                new ObjectParameter("PONUMBER", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteTempHSS02003", pONUMBERParameter);
        }
    
        public virtual int sp_DeleteTempHSS02005(string pONUMBER)
        {
            var pONUMBERParameter = pONUMBER != null ?
                new ObjectParameter("PONUMBER", pONUMBER) :
                new ObjectParameter("PONUMBER", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteTempHSS02005", pONUMBERParameter);
        }
    
        public virtual int sp_DeleteTempHSS02007(string pONUMBER)
        {
            var pONUMBERParameter = pONUMBER != null ?
                new ObjectParameter("PONUMBER", pONUMBER) :
                new ObjectParameter("PONUMBER", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteTempHSS02007", pONUMBERParameter);
        }
    
        public virtual int sp_DeleteTempIS(string pONUMBER)
        {
            var pONUMBERParameter = pONUMBER != null ?
                new ObjectParameter("PONUMBER", pONUMBER) :
                new ObjectParameter("PONUMBER", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteTempIS", pONUMBERParameter);
        }
    
        public virtual int sp_DeleteTemps02009IS(string pONUMBER)
        {
            var pONUMBERParameter = pONUMBER != null ?
                new ObjectParameter("PONUMBER", pONUMBER) :
                new ObjectParameter("PONUMBER", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteTemps02009IS", pONUMBERParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_GetDataForXML_Result> sp_GetDataForXML()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetDataForXML_Result>("sp_GetDataForXML");
        }
    
        public virtual ObjectResult<sp_GetDataForXML_TEST_Result> sp_GetDataForXML_TEST()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetDataForXML_TEST_Result>("sp_GetDataForXML_TEST");
        }
    
        public virtual ObjectResult<sp_GetDataForXML_TESTING_Result> sp_GetDataForXML_TESTING()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetDataForXML_TESTING_Result>("sp_GetDataForXML_TESTING");
        }
    
        public virtual ObjectResult<sp_GetDataForXMLNonB2B_Result> sp_GetDataForXMLNonB2B()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetDataForXMLNonB2B_Result>("sp_GetDataForXMLNonB2B");
        }
    
        public virtual ObjectResult<string> sp_GetKodeCabangAI(string pONUMBER)
        {
            var pONUMBERParameter = pONUMBER != null ?
                new ObjectParameter("PONUMBER", pONUMBER) :
                new ObjectParameter("PONUMBER", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_GetKodeCabangAI", pONUMBERParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int SP_PARSINGXML(string purcDoc, string itemDoc, Nullable<System.DateTime> dateCreated, string docType, string payTerm, string vendor, Nullable<System.DateTime> docDate, Nullable<System.DateTime> changeDate, string material, string matGroup, string docCond, Nullable<double> netPrice, string curr, Nullable<double> pOQty, string uoM, string infoRecord, string pRNumber, string compCode, string compName, string plant, string text, string flagDelete, string name1, string city, Nullable<double> discPrice, string currDisc, string bBNPrice, string currBBN, string dPPPrice, string currDPP, string dLCPrice, string currDLC, string pPNPrice, string currPPN, string oPTPrice, string currOPT, Nullable<decimal> totalpayment, Nullable<decimal> localprice, string currency, string itemText, string textLine, string textLine2, string textLine3, string textLine4, string textLine5, string textLine6, string textLine7, string textLine8, string textLine9, string textLine10, string textLine11, Nullable<System.DateTime> pRRelDate, string name, Nullable<System.DateTime> itemDelvDate, Nullable<System.DateTime> itemDelvDate2, string netprPurcInfoRec, string currNetprInfRec, string carDesc, string carModel, string carType, string carBrand, string carTransmisi, string carSeries, string carYear, string matDoc, string matDocYear, Nullable<decimal> matDocItem, Nullable<System.DateTime> postDateDoc, Nullable<System.DateTime> postDateDocBPKB, string accDocNumber, string fiscalYear, string clearingDocNumber, Nullable<System.DateTime> clearingDate, string matDocGI, string equipmentNumb, string batchNumber, string serialNumber, string manSerialNumber, string modelNumber, Nullable<System.DateTime> dateRecordCreated, string assetNumber, Nullable<System.DateTime> carSTNK, string carRBentuk, Nullable<System.DateTime> dateCarRBentuk, string carFaktur, Nullable<System.DateTime> dateCarFaktur, string carFormA, Nullable<System.DateTime> dateCarFormA, string carSertif, Nullable<System.DateTime> dateCarSertif, string carRegUji, string carBPKB, string statusCarBPKB, string refDocNo, string refKey, string pRSAP, Nullable<System.DateTime> pRDate, Nullable<System.DateTime> pRDeliveryDate, string requesterName, string pRStatus, string pRKaroseri, string pRAccessories, string processVKaroseri, string processVAccs, string customer, Nullable<double> ontheRoadPrice, Nullable<System.DateTime> promiseDeiveryDate, string periodePO, string officerName, string unitDeliveryAddress, string pOStatus, Nullable<decimal> schedItem, Nullable<System.DateTime> schedDelvDate, string bBN, string merk, string color, string year, string bentukAkhirUnit, string gardan, string salescontractNo, Nullable<System.DateTime> salescontractdate, string customername, string tglpromisedeliverybpkb, string textLine12, string qCApps, string namaFileXLMLastUpdate, string statusLog, string message)
        {
            var purcDocParameter = purcDoc != null ?
                new ObjectParameter("PurcDoc", purcDoc) :
                new ObjectParameter("PurcDoc", typeof(string));
    
            var itemDocParameter = itemDoc != null ?
                new ObjectParameter("ItemDoc", itemDoc) :
                new ObjectParameter("ItemDoc", typeof(string));
    
            var dateCreatedParameter = dateCreated.HasValue ?
                new ObjectParameter("DateCreated", dateCreated) :
                new ObjectParameter("DateCreated", typeof(System.DateTime));
    
            var docTypeParameter = docType != null ?
                new ObjectParameter("DocType", docType) :
                new ObjectParameter("DocType", typeof(string));
    
            var payTermParameter = payTerm != null ?
                new ObjectParameter("PayTerm", payTerm) :
                new ObjectParameter("PayTerm", typeof(string));
    
            var vendorParameter = vendor != null ?
                new ObjectParameter("Vendor", vendor) :
                new ObjectParameter("Vendor", typeof(string));
    
            var docDateParameter = docDate.HasValue ?
                new ObjectParameter("DocDate", docDate) :
                new ObjectParameter("DocDate", typeof(System.DateTime));
    
            var changeDateParameter = changeDate.HasValue ?
                new ObjectParameter("ChangeDate", changeDate) :
                new ObjectParameter("ChangeDate", typeof(System.DateTime));
    
            var materialParameter = material != null ?
                new ObjectParameter("Material", material) :
                new ObjectParameter("Material", typeof(string));
    
            var matGroupParameter = matGroup != null ?
                new ObjectParameter("MatGroup", matGroup) :
                new ObjectParameter("MatGroup", typeof(string));
    
            var docCondParameter = docCond != null ?
                new ObjectParameter("DocCond", docCond) :
                new ObjectParameter("DocCond", typeof(string));
    
            var netPriceParameter = netPrice.HasValue ?
                new ObjectParameter("NetPrice", netPrice) :
                new ObjectParameter("NetPrice", typeof(double));
    
            var currParameter = curr != null ?
                new ObjectParameter("Curr", curr) :
                new ObjectParameter("Curr", typeof(string));
    
            var pOQtyParameter = pOQty.HasValue ?
                new ObjectParameter("POQty", pOQty) :
                new ObjectParameter("POQty", typeof(double));
    
            var uoMParameter = uoM != null ?
                new ObjectParameter("UoM", uoM) :
                new ObjectParameter("UoM", typeof(string));
    
            var infoRecordParameter = infoRecord != null ?
                new ObjectParameter("InfoRecord", infoRecord) :
                new ObjectParameter("InfoRecord", typeof(string));
    
            var pRNumberParameter = pRNumber != null ?
                new ObjectParameter("PRNumber", pRNumber) :
                new ObjectParameter("PRNumber", typeof(string));
    
            var compCodeParameter = compCode != null ?
                new ObjectParameter("CompCode", compCode) :
                new ObjectParameter("CompCode", typeof(string));
    
            var compNameParameter = compName != null ?
                new ObjectParameter("CompName", compName) :
                new ObjectParameter("CompName", typeof(string));
    
            var plantParameter = plant != null ?
                new ObjectParameter("Plant", plant) :
                new ObjectParameter("Plant", typeof(string));
    
            var textParameter = text != null ?
                new ObjectParameter("Text", text) :
                new ObjectParameter("Text", typeof(string));
    
            var flagDeleteParameter = flagDelete != null ?
                new ObjectParameter("FlagDelete", flagDelete) :
                new ObjectParameter("FlagDelete", typeof(string));
    
            var name1Parameter = name1 != null ?
                new ObjectParameter("Name1", name1) :
                new ObjectParameter("Name1", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var discPriceParameter = discPrice.HasValue ?
                new ObjectParameter("DiscPrice", discPrice) :
                new ObjectParameter("DiscPrice", typeof(double));
    
            var currDiscParameter = currDisc != null ?
                new ObjectParameter("CurrDisc", currDisc) :
                new ObjectParameter("CurrDisc", typeof(string));
    
            var bBNPriceParameter = bBNPrice != null ?
                new ObjectParameter("BBNPrice", bBNPrice) :
                new ObjectParameter("BBNPrice", typeof(string));
    
            var currBBNParameter = currBBN != null ?
                new ObjectParameter("CurrBBN", currBBN) :
                new ObjectParameter("CurrBBN", typeof(string));
    
            var dPPPriceParameter = dPPPrice != null ?
                new ObjectParameter("DPPPrice", dPPPrice) :
                new ObjectParameter("DPPPrice", typeof(string));
    
            var currDPPParameter = currDPP != null ?
                new ObjectParameter("CurrDPP", currDPP) :
                new ObjectParameter("CurrDPP", typeof(string));
    
            var dLCPriceParameter = dLCPrice != null ?
                new ObjectParameter("DLCPrice", dLCPrice) :
                new ObjectParameter("DLCPrice", typeof(string));
    
            var currDLCParameter = currDLC != null ?
                new ObjectParameter("CurrDLC", currDLC) :
                new ObjectParameter("CurrDLC", typeof(string));
    
            var pPNPriceParameter = pPNPrice != null ?
                new ObjectParameter("PPNPrice", pPNPrice) :
                new ObjectParameter("PPNPrice", typeof(string));
    
            var currPPNParameter = currPPN != null ?
                new ObjectParameter("CurrPPN", currPPN) :
                new ObjectParameter("CurrPPN", typeof(string));
    
            var oPTPriceParameter = oPTPrice != null ?
                new ObjectParameter("OPTPrice", oPTPrice) :
                new ObjectParameter("OPTPrice", typeof(string));
    
            var currOPTParameter = currOPT != null ?
                new ObjectParameter("CurrOPT", currOPT) :
                new ObjectParameter("CurrOPT", typeof(string));
    
            var totalpaymentParameter = totalpayment.HasValue ?
                new ObjectParameter("Totalpayment", totalpayment) :
                new ObjectParameter("Totalpayment", typeof(decimal));
    
            var localpriceParameter = localprice.HasValue ?
                new ObjectParameter("Localprice", localprice) :
                new ObjectParameter("Localprice", typeof(decimal));
    
            var currencyParameter = currency != null ?
                new ObjectParameter("Currency", currency) :
                new ObjectParameter("Currency", typeof(string));
    
            var itemTextParameter = itemText != null ?
                new ObjectParameter("ItemText", itemText) :
                new ObjectParameter("ItemText", typeof(string));
    
            var textLineParameter = textLine != null ?
                new ObjectParameter("TextLine", textLine) :
                new ObjectParameter("TextLine", typeof(string));
    
            var textLine2Parameter = textLine2 != null ?
                new ObjectParameter("TextLine2", textLine2) :
                new ObjectParameter("TextLine2", typeof(string));
    
            var textLine3Parameter = textLine3 != null ?
                new ObjectParameter("TextLine3", textLine3) :
                new ObjectParameter("TextLine3", typeof(string));
    
            var textLine4Parameter = textLine4 != null ?
                new ObjectParameter("TextLine4", textLine4) :
                new ObjectParameter("TextLine4", typeof(string));
    
            var textLine5Parameter = textLine5 != null ?
                new ObjectParameter("TextLine5", textLine5) :
                new ObjectParameter("TextLine5", typeof(string));
    
            var textLine6Parameter = textLine6 != null ?
                new ObjectParameter("TextLine6", textLine6) :
                new ObjectParameter("TextLine6", typeof(string));
    
            var textLine7Parameter = textLine7 != null ?
                new ObjectParameter("TextLine7", textLine7) :
                new ObjectParameter("TextLine7", typeof(string));
    
            var textLine8Parameter = textLine8 != null ?
                new ObjectParameter("TextLine8", textLine8) :
                new ObjectParameter("TextLine8", typeof(string));
    
            var textLine9Parameter = textLine9 != null ?
                new ObjectParameter("TextLine9", textLine9) :
                new ObjectParameter("TextLine9", typeof(string));
    
            var textLine10Parameter = textLine10 != null ?
                new ObjectParameter("TextLine10", textLine10) :
                new ObjectParameter("TextLine10", typeof(string));
    
            var textLine11Parameter = textLine11 != null ?
                new ObjectParameter("TextLine11", textLine11) :
                new ObjectParameter("TextLine11", typeof(string));
    
            var pRRelDateParameter = pRRelDate.HasValue ?
                new ObjectParameter("PRRelDate", pRRelDate) :
                new ObjectParameter("PRRelDate", typeof(System.DateTime));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var itemDelvDateParameter = itemDelvDate.HasValue ?
                new ObjectParameter("ItemDelvDate", itemDelvDate) :
                new ObjectParameter("ItemDelvDate", typeof(System.DateTime));
    
            var itemDelvDate2Parameter = itemDelvDate2.HasValue ?
                new ObjectParameter("ItemDelvDate2", itemDelvDate2) :
                new ObjectParameter("ItemDelvDate2", typeof(System.DateTime));
    
            var netprPurcInfoRecParameter = netprPurcInfoRec != null ?
                new ObjectParameter("NetprPurcInfoRec", netprPurcInfoRec) :
                new ObjectParameter("NetprPurcInfoRec", typeof(string));
    
            var currNetprInfRecParameter = currNetprInfRec != null ?
                new ObjectParameter("CurrNetprInfRec", currNetprInfRec) :
                new ObjectParameter("CurrNetprInfRec", typeof(string));
    
            var carDescParameter = carDesc != null ?
                new ObjectParameter("CarDesc", carDesc) :
                new ObjectParameter("CarDesc", typeof(string));
    
            var carModelParameter = carModel != null ?
                new ObjectParameter("CarModel", carModel) :
                new ObjectParameter("CarModel", typeof(string));
    
            var carTypeParameter = carType != null ?
                new ObjectParameter("CarType", carType) :
                new ObjectParameter("CarType", typeof(string));
    
            var carBrandParameter = carBrand != null ?
                new ObjectParameter("CarBrand", carBrand) :
                new ObjectParameter("CarBrand", typeof(string));
    
            var carTransmisiParameter = carTransmisi != null ?
                new ObjectParameter("CarTransmisi", carTransmisi) :
                new ObjectParameter("CarTransmisi", typeof(string));
    
            var carSeriesParameter = carSeries != null ?
                new ObjectParameter("CarSeries", carSeries) :
                new ObjectParameter("CarSeries", typeof(string));
    
            var carYearParameter = carYear != null ?
                new ObjectParameter("CarYear", carYear) :
                new ObjectParameter("CarYear", typeof(string));
    
            var matDocParameter = matDoc != null ?
                new ObjectParameter("MatDoc", matDoc) :
                new ObjectParameter("MatDoc", typeof(string));
    
            var matDocYearParameter = matDocYear != null ?
                new ObjectParameter("MatDocYear", matDocYear) :
                new ObjectParameter("MatDocYear", typeof(string));
    
            var matDocItemParameter = matDocItem.HasValue ?
                new ObjectParameter("MatDocItem", matDocItem) :
                new ObjectParameter("MatDocItem", typeof(decimal));
    
            var postDateDocParameter = postDateDoc.HasValue ?
                new ObjectParameter("PostDateDoc", postDateDoc) :
                new ObjectParameter("PostDateDoc", typeof(System.DateTime));
    
            var postDateDocBPKBParameter = postDateDocBPKB.HasValue ?
                new ObjectParameter("PostDateDocBPKB", postDateDocBPKB) :
                new ObjectParameter("PostDateDocBPKB", typeof(System.DateTime));
    
            var accDocNumberParameter = accDocNumber != null ?
                new ObjectParameter("AccDocNumber", accDocNumber) :
                new ObjectParameter("AccDocNumber", typeof(string));
    
            var fiscalYearParameter = fiscalYear != null ?
                new ObjectParameter("FiscalYear", fiscalYear) :
                new ObjectParameter("FiscalYear", typeof(string));
    
            var clearingDocNumberParameter = clearingDocNumber != null ?
                new ObjectParameter("ClearingDocNumber", clearingDocNumber) :
                new ObjectParameter("ClearingDocNumber", typeof(string));
    
            var clearingDateParameter = clearingDate.HasValue ?
                new ObjectParameter("ClearingDate", clearingDate) :
                new ObjectParameter("ClearingDate", typeof(System.DateTime));
    
            var matDocGIParameter = matDocGI != null ?
                new ObjectParameter("MatDocGI", matDocGI) :
                new ObjectParameter("MatDocGI", typeof(string));
    
            var equipmentNumbParameter = equipmentNumb != null ?
                new ObjectParameter("EquipmentNumb", equipmentNumb) :
                new ObjectParameter("EquipmentNumb", typeof(string));
    
            var batchNumberParameter = batchNumber != null ?
                new ObjectParameter("BatchNumber", batchNumber) :
                new ObjectParameter("BatchNumber", typeof(string));
    
            var serialNumberParameter = serialNumber != null ?
                new ObjectParameter("SerialNumber", serialNumber) :
                new ObjectParameter("SerialNumber", typeof(string));
    
            var manSerialNumberParameter = manSerialNumber != null ?
                new ObjectParameter("ManSerialNumber", manSerialNumber) :
                new ObjectParameter("ManSerialNumber", typeof(string));
    
            var modelNumberParameter = modelNumber != null ?
                new ObjectParameter("ModelNumber", modelNumber) :
                new ObjectParameter("ModelNumber", typeof(string));
    
            var dateRecordCreatedParameter = dateRecordCreated.HasValue ?
                new ObjectParameter("DateRecordCreated", dateRecordCreated) :
                new ObjectParameter("DateRecordCreated", typeof(System.DateTime));
    
            var assetNumberParameter = assetNumber != null ?
                new ObjectParameter("AssetNumber", assetNumber) :
                new ObjectParameter("AssetNumber", typeof(string));
    
            var carSTNKParameter = carSTNK.HasValue ?
                new ObjectParameter("CarSTNK", carSTNK) :
                new ObjectParameter("CarSTNK", typeof(System.DateTime));
    
            var carRBentukParameter = carRBentuk != null ?
                new ObjectParameter("CarRBentuk", carRBentuk) :
                new ObjectParameter("CarRBentuk", typeof(string));
    
            var dateCarRBentukParameter = dateCarRBentuk.HasValue ?
                new ObjectParameter("DateCarRBentuk", dateCarRBentuk) :
                new ObjectParameter("DateCarRBentuk", typeof(System.DateTime));
    
            var carFakturParameter = carFaktur != null ?
                new ObjectParameter("CarFaktur", carFaktur) :
                new ObjectParameter("CarFaktur", typeof(string));
    
            var dateCarFakturParameter = dateCarFaktur.HasValue ?
                new ObjectParameter("DateCarFaktur", dateCarFaktur) :
                new ObjectParameter("DateCarFaktur", typeof(System.DateTime));
    
            var carFormAParameter = carFormA != null ?
                new ObjectParameter("CarFormA", carFormA) :
                new ObjectParameter("CarFormA", typeof(string));
    
            var dateCarFormAParameter = dateCarFormA.HasValue ?
                new ObjectParameter("DateCarFormA", dateCarFormA) :
                new ObjectParameter("DateCarFormA", typeof(System.DateTime));
    
            var carSertifParameter = carSertif != null ?
                new ObjectParameter("CarSertif", carSertif) :
                new ObjectParameter("CarSertif", typeof(string));
    
            var dateCarSertifParameter = dateCarSertif.HasValue ?
                new ObjectParameter("DateCarSertif", dateCarSertif) :
                new ObjectParameter("DateCarSertif", typeof(System.DateTime));
    
            var carRegUjiParameter = carRegUji != null ?
                new ObjectParameter("CarRegUji", carRegUji) :
                new ObjectParameter("CarRegUji", typeof(string));
    
            var carBPKBParameter = carBPKB != null ?
                new ObjectParameter("CarBPKB", carBPKB) :
                new ObjectParameter("CarBPKB", typeof(string));
    
            var statusCarBPKBParameter = statusCarBPKB != null ?
                new ObjectParameter("StatusCarBPKB", statusCarBPKB) :
                new ObjectParameter("StatusCarBPKB", typeof(string));
    
            var refDocNoParameter = refDocNo != null ?
                new ObjectParameter("RefDocNo", refDocNo) :
                new ObjectParameter("RefDocNo", typeof(string));
    
            var refKeyParameter = refKey != null ?
                new ObjectParameter("RefKey", refKey) :
                new ObjectParameter("RefKey", typeof(string));
    
            var pRSAPParameter = pRSAP != null ?
                new ObjectParameter("PRSAP", pRSAP) :
                new ObjectParameter("PRSAP", typeof(string));
    
            var pRDateParameter = pRDate.HasValue ?
                new ObjectParameter("PRDate", pRDate) :
                new ObjectParameter("PRDate", typeof(System.DateTime));
    
            var pRDeliveryDateParameter = pRDeliveryDate.HasValue ?
                new ObjectParameter("PRDeliveryDate", pRDeliveryDate) :
                new ObjectParameter("PRDeliveryDate", typeof(System.DateTime));
    
            var requesterNameParameter = requesterName != null ?
                new ObjectParameter("RequesterName", requesterName) :
                new ObjectParameter("RequesterName", typeof(string));
    
            var pRStatusParameter = pRStatus != null ?
                new ObjectParameter("PRStatus", pRStatus) :
                new ObjectParameter("PRStatus", typeof(string));
    
            var pRKaroseriParameter = pRKaroseri != null ?
                new ObjectParameter("PRKaroseri", pRKaroseri) :
                new ObjectParameter("PRKaroseri", typeof(string));
    
            var pRAccessoriesParameter = pRAccessories != null ?
                new ObjectParameter("PRAccessories", pRAccessories) :
                new ObjectParameter("PRAccessories", typeof(string));
    
            var processVKaroseriParameter = processVKaroseri != null ?
                new ObjectParameter("ProcessVKaroseri", processVKaroseri) :
                new ObjectParameter("ProcessVKaroseri", typeof(string));
    
            var processVAccsParameter = processVAccs != null ?
                new ObjectParameter("ProcessVAccs", processVAccs) :
                new ObjectParameter("ProcessVAccs", typeof(string));
    
            var customerParameter = customer != null ?
                new ObjectParameter("Customer", customer) :
                new ObjectParameter("Customer", typeof(string));
    
            var ontheRoadPriceParameter = ontheRoadPrice.HasValue ?
                new ObjectParameter("OntheRoadPrice", ontheRoadPrice) :
                new ObjectParameter("OntheRoadPrice", typeof(double));
    
            var promiseDeiveryDateParameter = promiseDeiveryDate.HasValue ?
                new ObjectParameter("PromiseDeiveryDate", promiseDeiveryDate) :
                new ObjectParameter("PromiseDeiveryDate", typeof(System.DateTime));
    
            var periodePOParameter = periodePO != null ?
                new ObjectParameter("PeriodePO", periodePO) :
                new ObjectParameter("PeriodePO", typeof(string));
    
            var officerNameParameter = officerName != null ?
                new ObjectParameter("OfficerName", officerName) :
                new ObjectParameter("OfficerName", typeof(string));
    
            var unitDeliveryAddressParameter = unitDeliveryAddress != null ?
                new ObjectParameter("UnitDeliveryAddress", unitDeliveryAddress) :
                new ObjectParameter("UnitDeliveryAddress", typeof(string));
    
            var pOStatusParameter = pOStatus != null ?
                new ObjectParameter("POStatus", pOStatus) :
                new ObjectParameter("POStatus", typeof(string));
    
            var schedItemParameter = schedItem.HasValue ?
                new ObjectParameter("SchedItem", schedItem) :
                new ObjectParameter("SchedItem", typeof(decimal));
    
            var schedDelvDateParameter = schedDelvDate.HasValue ?
                new ObjectParameter("SchedDelvDate", schedDelvDate) :
                new ObjectParameter("SchedDelvDate", typeof(System.DateTime));
    
            var bBNParameter = bBN != null ?
                new ObjectParameter("BBN", bBN) :
                new ObjectParameter("BBN", typeof(string));
    
            var merkParameter = merk != null ?
                new ObjectParameter("merk", merk) :
                new ObjectParameter("merk", typeof(string));
    
            var colorParameter = color != null ?
                new ObjectParameter("color", color) :
                new ObjectParameter("color", typeof(string));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var bentukAkhirUnitParameter = bentukAkhirUnit != null ?
                new ObjectParameter("BentukAkhirUnit", bentukAkhirUnit) :
                new ObjectParameter("BentukAkhirUnit", typeof(string));
    
            var gardanParameter = gardan != null ?
                new ObjectParameter("Gardan", gardan) :
                new ObjectParameter("Gardan", typeof(string));
    
            var salescontractNoParameter = salescontractNo != null ?
                new ObjectParameter("salescontractNo", salescontractNo) :
                new ObjectParameter("salescontractNo", typeof(string));
    
            var salescontractdateParameter = salescontractdate.HasValue ?
                new ObjectParameter("Salescontractdate", salescontractdate) :
                new ObjectParameter("Salescontractdate", typeof(System.DateTime));
    
            var customernameParameter = customername != null ?
                new ObjectParameter("Customername", customername) :
                new ObjectParameter("Customername", typeof(string));
    
            var tglpromisedeliverybpkbParameter = tglpromisedeliverybpkb != null ?
                new ObjectParameter("tglpromisedeliverybpkb", tglpromisedeliverybpkb) :
                new ObjectParameter("tglpromisedeliverybpkb", typeof(string));
    
            var textLine12Parameter = textLine12 != null ?
                new ObjectParameter("TextLine12", textLine12) :
                new ObjectParameter("TextLine12", typeof(string));
    
            var qCAppsParameter = qCApps != null ?
                new ObjectParameter("QCApps", qCApps) :
                new ObjectParameter("QCApps", typeof(string));
    
            var namaFileXLMLastUpdateParameter = namaFileXLMLastUpdate != null ?
                new ObjectParameter("NamaFileXLMLastUpdate", namaFileXLMLastUpdate) :
                new ObjectParameter("NamaFileXLMLastUpdate", typeof(string));
    
            var statusLogParameter = statusLog != null ?
                new ObjectParameter("StatusLog", statusLog) :
                new ObjectParameter("StatusLog", typeof(string));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_PARSINGXML", purcDocParameter, itemDocParameter, dateCreatedParameter, docTypeParameter, payTermParameter, vendorParameter, docDateParameter, changeDateParameter, materialParameter, matGroupParameter, docCondParameter, netPriceParameter, currParameter, pOQtyParameter, uoMParameter, infoRecordParameter, pRNumberParameter, compCodeParameter, compNameParameter, plantParameter, textParameter, flagDeleteParameter, name1Parameter, cityParameter, discPriceParameter, currDiscParameter, bBNPriceParameter, currBBNParameter, dPPPriceParameter, currDPPParameter, dLCPriceParameter, currDLCParameter, pPNPriceParameter, currPPNParameter, oPTPriceParameter, currOPTParameter, totalpaymentParameter, localpriceParameter, currencyParameter, itemTextParameter, textLineParameter, textLine2Parameter, textLine3Parameter, textLine4Parameter, textLine5Parameter, textLine6Parameter, textLine7Parameter, textLine8Parameter, textLine9Parameter, textLine10Parameter, textLine11Parameter, pRRelDateParameter, nameParameter, itemDelvDateParameter, itemDelvDate2Parameter, netprPurcInfoRecParameter, currNetprInfRecParameter, carDescParameter, carModelParameter, carTypeParameter, carBrandParameter, carTransmisiParameter, carSeriesParameter, carYearParameter, matDocParameter, matDocYearParameter, matDocItemParameter, postDateDocParameter, postDateDocBPKBParameter, accDocNumberParameter, fiscalYearParameter, clearingDocNumberParameter, clearingDateParameter, matDocGIParameter, equipmentNumbParameter, batchNumberParameter, serialNumberParameter, manSerialNumberParameter, modelNumberParameter, dateRecordCreatedParameter, assetNumberParameter, carSTNKParameter, carRBentukParameter, dateCarRBentukParameter, carFakturParameter, dateCarFakturParameter, carFormAParameter, dateCarFormAParameter, carSertifParameter, dateCarSertifParameter, carRegUjiParameter, carBPKBParameter, statusCarBPKBParameter, refDocNoParameter, refKeyParameter, pRSAPParameter, pRDateParameter, pRDeliveryDateParameter, requesterNameParameter, pRStatusParameter, pRKaroseriParameter, pRAccessoriesParameter, processVKaroseriParameter, processVAccsParameter, customerParameter, ontheRoadPriceParameter, promiseDeiveryDateParameter, periodePOParameter, officerNameParameter, unitDeliveryAddressParameter, pOStatusParameter, schedItemParameter, schedDelvDateParameter, bBNParameter, merkParameter, colorParameter, yearParameter, bentukAkhirUnitParameter, gardanParameter, salescontractNoParameter, salescontractdateParameter, customernameParameter, tglpromisedeliverybpkbParameter, textLine12Parameter, qCAppsParameter, namaFileXLMLastUpdateParameter, statusLogParameter, messageParameter);
        }
    
        public virtual int SP_PARSINGXML_BAK(string purcDoc, string itemDoc, Nullable<System.DateTime> dateCreated, string docType, string payTerm, string vendor, Nullable<System.DateTime> docDate, Nullable<System.DateTime> changeDate, string material, string matGroup, string docCond, Nullable<double> netPrice, string curr, Nullable<double> pOQty, string uoM, string infoRecord, string pRNumber, string compCode, string compName, string plant, string text, string flagDelete, string name1, string city, Nullable<double> discPrice, string currDisc, string bBNPrice, string currBBN, string dPPPrice, string currDPP, string dLCPrice, string currDLC, string pPNPrice, string currPPN, string oPTPrice, string currOPT, Nullable<decimal> totalpayment, Nullable<decimal> localprice, string currency, string itemText, string textLine, string textLine2, string textLine3, string textLine4, string textLine5, string textLine6, string textLine7, string textLine8, string textLine9, string textLine10, string textLine11, Nullable<System.DateTime> pRRelDate, string name, Nullable<System.DateTime> itemDelvDate, Nullable<System.DateTime> itemDelvDate2, string netprPurcInfoRec, string currNetprInfRec, string carDesc, string carModel, string carType, string carBrand, string carTransmisi, string carSeries, string carYear, string matDoc, string matDocYear, Nullable<decimal> matDocItem, Nullable<System.DateTime> postDateDoc, Nullable<System.DateTime> postDateDocBPKB, string accDocNumber, string fiscalYear, string clearingDocNumber, Nullable<System.DateTime> clearingDate, string matDocGI, string equipmentNumb, string batchNumber, string serialNumber, string manSerialNumber, string modelNumber, Nullable<System.DateTime> dateRecordCreated, string assetNumber, Nullable<System.DateTime> carSTNK, string carRBentuk, Nullable<System.DateTime> dateCarRBentuk, string carFaktur, Nullable<System.DateTime> dateCarFaktur, string carFormA, Nullable<System.DateTime> dateCarFormA, string carSertif, Nullable<System.DateTime> dateCarSertif, string carRegUji, string carBPKB, string statusCarBPKB, string refDocNo, string refKey, string pRSAP, Nullable<System.DateTime> pRDate, Nullable<System.DateTime> pRDeliveryDate, string requesterName, string pRStatus, string pRKaroseri, string pRAccessories, string processVKaroseri, string processVAccs, string customer, Nullable<double> ontheRoadPrice, Nullable<System.DateTime> promiseDeiveryDate, string periodePO, string officerName, string unitDeliveryAddress, string pOStatus, Nullable<decimal> schedItem, Nullable<System.DateTime> schedDelvDate, string bBN, string merk, string color, string year, string bentukAkhirUnit, string gardan, string salescontractNo, Nullable<System.DateTime> salescontractdate, string customername, string tglpromisedeliverybpkb, string textLine12, string qCApps, string namaFileXLMLastUpdate, string statusLog, string message)
        {
            var purcDocParameter = purcDoc != null ?
                new ObjectParameter("PurcDoc", purcDoc) :
                new ObjectParameter("PurcDoc", typeof(string));
    
            var itemDocParameter = itemDoc != null ?
                new ObjectParameter("ItemDoc", itemDoc) :
                new ObjectParameter("ItemDoc", typeof(string));
    
            var dateCreatedParameter = dateCreated.HasValue ?
                new ObjectParameter("DateCreated", dateCreated) :
                new ObjectParameter("DateCreated", typeof(System.DateTime));
    
            var docTypeParameter = docType != null ?
                new ObjectParameter("DocType", docType) :
                new ObjectParameter("DocType", typeof(string));
    
            var payTermParameter = payTerm != null ?
                new ObjectParameter("PayTerm", payTerm) :
                new ObjectParameter("PayTerm", typeof(string));
    
            var vendorParameter = vendor != null ?
                new ObjectParameter("Vendor", vendor) :
                new ObjectParameter("Vendor", typeof(string));
    
            var docDateParameter = docDate.HasValue ?
                new ObjectParameter("DocDate", docDate) :
                new ObjectParameter("DocDate", typeof(System.DateTime));
    
            var changeDateParameter = changeDate.HasValue ?
                new ObjectParameter("ChangeDate", changeDate) :
                new ObjectParameter("ChangeDate", typeof(System.DateTime));
    
            var materialParameter = material != null ?
                new ObjectParameter("Material", material) :
                new ObjectParameter("Material", typeof(string));
    
            var matGroupParameter = matGroup != null ?
                new ObjectParameter("MatGroup", matGroup) :
                new ObjectParameter("MatGroup", typeof(string));
    
            var docCondParameter = docCond != null ?
                new ObjectParameter("DocCond", docCond) :
                new ObjectParameter("DocCond", typeof(string));
    
            var netPriceParameter = netPrice.HasValue ?
                new ObjectParameter("NetPrice", netPrice) :
                new ObjectParameter("NetPrice", typeof(double));
    
            var currParameter = curr != null ?
                new ObjectParameter("Curr", curr) :
                new ObjectParameter("Curr", typeof(string));
    
            var pOQtyParameter = pOQty.HasValue ?
                new ObjectParameter("POQty", pOQty) :
                new ObjectParameter("POQty", typeof(double));
    
            var uoMParameter = uoM != null ?
                new ObjectParameter("UoM", uoM) :
                new ObjectParameter("UoM", typeof(string));
    
            var infoRecordParameter = infoRecord != null ?
                new ObjectParameter("InfoRecord", infoRecord) :
                new ObjectParameter("InfoRecord", typeof(string));
    
            var pRNumberParameter = pRNumber != null ?
                new ObjectParameter("PRNumber", pRNumber) :
                new ObjectParameter("PRNumber", typeof(string));
    
            var compCodeParameter = compCode != null ?
                new ObjectParameter("CompCode", compCode) :
                new ObjectParameter("CompCode", typeof(string));
    
            var compNameParameter = compName != null ?
                new ObjectParameter("CompName", compName) :
                new ObjectParameter("CompName", typeof(string));
    
            var plantParameter = plant != null ?
                new ObjectParameter("Plant", plant) :
                new ObjectParameter("Plant", typeof(string));
    
            var textParameter = text != null ?
                new ObjectParameter("Text", text) :
                new ObjectParameter("Text", typeof(string));
    
            var flagDeleteParameter = flagDelete != null ?
                new ObjectParameter("FlagDelete", flagDelete) :
                new ObjectParameter("FlagDelete", typeof(string));
    
            var name1Parameter = name1 != null ?
                new ObjectParameter("Name1", name1) :
                new ObjectParameter("Name1", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var discPriceParameter = discPrice.HasValue ?
                new ObjectParameter("DiscPrice", discPrice) :
                new ObjectParameter("DiscPrice", typeof(double));
    
            var currDiscParameter = currDisc != null ?
                new ObjectParameter("CurrDisc", currDisc) :
                new ObjectParameter("CurrDisc", typeof(string));
    
            var bBNPriceParameter = bBNPrice != null ?
                new ObjectParameter("BBNPrice", bBNPrice) :
                new ObjectParameter("BBNPrice", typeof(string));
    
            var currBBNParameter = currBBN != null ?
                new ObjectParameter("CurrBBN", currBBN) :
                new ObjectParameter("CurrBBN", typeof(string));
    
            var dPPPriceParameter = dPPPrice != null ?
                new ObjectParameter("DPPPrice", dPPPrice) :
                new ObjectParameter("DPPPrice", typeof(string));
    
            var currDPPParameter = currDPP != null ?
                new ObjectParameter("CurrDPP", currDPP) :
                new ObjectParameter("CurrDPP", typeof(string));
    
            var dLCPriceParameter = dLCPrice != null ?
                new ObjectParameter("DLCPrice", dLCPrice) :
                new ObjectParameter("DLCPrice", typeof(string));
    
            var currDLCParameter = currDLC != null ?
                new ObjectParameter("CurrDLC", currDLC) :
                new ObjectParameter("CurrDLC", typeof(string));
    
            var pPNPriceParameter = pPNPrice != null ?
                new ObjectParameter("PPNPrice", pPNPrice) :
                new ObjectParameter("PPNPrice", typeof(string));
    
            var currPPNParameter = currPPN != null ?
                new ObjectParameter("CurrPPN", currPPN) :
                new ObjectParameter("CurrPPN", typeof(string));
    
            var oPTPriceParameter = oPTPrice != null ?
                new ObjectParameter("OPTPrice", oPTPrice) :
                new ObjectParameter("OPTPrice", typeof(string));
    
            var currOPTParameter = currOPT != null ?
                new ObjectParameter("CurrOPT", currOPT) :
                new ObjectParameter("CurrOPT", typeof(string));
    
            var totalpaymentParameter = totalpayment.HasValue ?
                new ObjectParameter("Totalpayment", totalpayment) :
                new ObjectParameter("Totalpayment", typeof(decimal));
    
            var localpriceParameter = localprice.HasValue ?
                new ObjectParameter("Localprice", localprice) :
                new ObjectParameter("Localprice", typeof(decimal));
    
            var currencyParameter = currency != null ?
                new ObjectParameter("Currency", currency) :
                new ObjectParameter("Currency", typeof(string));
    
            var itemTextParameter = itemText != null ?
                new ObjectParameter("ItemText", itemText) :
                new ObjectParameter("ItemText", typeof(string));
    
            var textLineParameter = textLine != null ?
                new ObjectParameter("TextLine", textLine) :
                new ObjectParameter("TextLine", typeof(string));
    
            var textLine2Parameter = textLine2 != null ?
                new ObjectParameter("TextLine2", textLine2) :
                new ObjectParameter("TextLine2", typeof(string));
    
            var textLine3Parameter = textLine3 != null ?
                new ObjectParameter("TextLine3", textLine3) :
                new ObjectParameter("TextLine3", typeof(string));
    
            var textLine4Parameter = textLine4 != null ?
                new ObjectParameter("TextLine4", textLine4) :
                new ObjectParameter("TextLine4", typeof(string));
    
            var textLine5Parameter = textLine5 != null ?
                new ObjectParameter("TextLine5", textLine5) :
                new ObjectParameter("TextLine5", typeof(string));
    
            var textLine6Parameter = textLine6 != null ?
                new ObjectParameter("TextLine6", textLine6) :
                new ObjectParameter("TextLine6", typeof(string));
    
            var textLine7Parameter = textLine7 != null ?
                new ObjectParameter("TextLine7", textLine7) :
                new ObjectParameter("TextLine7", typeof(string));
    
            var textLine8Parameter = textLine8 != null ?
                new ObjectParameter("TextLine8", textLine8) :
                new ObjectParameter("TextLine8", typeof(string));
    
            var textLine9Parameter = textLine9 != null ?
                new ObjectParameter("TextLine9", textLine9) :
                new ObjectParameter("TextLine9", typeof(string));
    
            var textLine10Parameter = textLine10 != null ?
                new ObjectParameter("TextLine10", textLine10) :
                new ObjectParameter("TextLine10", typeof(string));
    
            var textLine11Parameter = textLine11 != null ?
                new ObjectParameter("TextLine11", textLine11) :
                new ObjectParameter("TextLine11", typeof(string));
    
            var pRRelDateParameter = pRRelDate.HasValue ?
                new ObjectParameter("PRRelDate", pRRelDate) :
                new ObjectParameter("PRRelDate", typeof(System.DateTime));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var itemDelvDateParameter = itemDelvDate.HasValue ?
                new ObjectParameter("ItemDelvDate", itemDelvDate) :
                new ObjectParameter("ItemDelvDate", typeof(System.DateTime));
    
            var itemDelvDate2Parameter = itemDelvDate2.HasValue ?
                new ObjectParameter("ItemDelvDate2", itemDelvDate2) :
                new ObjectParameter("ItemDelvDate2", typeof(System.DateTime));
    
            var netprPurcInfoRecParameter = netprPurcInfoRec != null ?
                new ObjectParameter("NetprPurcInfoRec", netprPurcInfoRec) :
                new ObjectParameter("NetprPurcInfoRec", typeof(string));
    
            var currNetprInfRecParameter = currNetprInfRec != null ?
                new ObjectParameter("CurrNetprInfRec", currNetprInfRec) :
                new ObjectParameter("CurrNetprInfRec", typeof(string));
    
            var carDescParameter = carDesc != null ?
                new ObjectParameter("CarDesc", carDesc) :
                new ObjectParameter("CarDesc", typeof(string));
    
            var carModelParameter = carModel != null ?
                new ObjectParameter("CarModel", carModel) :
                new ObjectParameter("CarModel", typeof(string));
    
            var carTypeParameter = carType != null ?
                new ObjectParameter("CarType", carType) :
                new ObjectParameter("CarType", typeof(string));
    
            var carBrandParameter = carBrand != null ?
                new ObjectParameter("CarBrand", carBrand) :
                new ObjectParameter("CarBrand", typeof(string));
    
            var carTransmisiParameter = carTransmisi != null ?
                new ObjectParameter("CarTransmisi", carTransmisi) :
                new ObjectParameter("CarTransmisi", typeof(string));
    
            var carSeriesParameter = carSeries != null ?
                new ObjectParameter("CarSeries", carSeries) :
                new ObjectParameter("CarSeries", typeof(string));
    
            var carYearParameter = carYear != null ?
                new ObjectParameter("CarYear", carYear) :
                new ObjectParameter("CarYear", typeof(string));
    
            var matDocParameter = matDoc != null ?
                new ObjectParameter("MatDoc", matDoc) :
                new ObjectParameter("MatDoc", typeof(string));
    
            var matDocYearParameter = matDocYear != null ?
                new ObjectParameter("MatDocYear", matDocYear) :
                new ObjectParameter("MatDocYear", typeof(string));
    
            var matDocItemParameter = matDocItem.HasValue ?
                new ObjectParameter("MatDocItem", matDocItem) :
                new ObjectParameter("MatDocItem", typeof(decimal));
    
            var postDateDocParameter = postDateDoc.HasValue ?
                new ObjectParameter("PostDateDoc", postDateDoc) :
                new ObjectParameter("PostDateDoc", typeof(System.DateTime));
    
            var postDateDocBPKBParameter = postDateDocBPKB.HasValue ?
                new ObjectParameter("PostDateDocBPKB", postDateDocBPKB) :
                new ObjectParameter("PostDateDocBPKB", typeof(System.DateTime));
    
            var accDocNumberParameter = accDocNumber != null ?
                new ObjectParameter("AccDocNumber", accDocNumber) :
                new ObjectParameter("AccDocNumber", typeof(string));
    
            var fiscalYearParameter = fiscalYear != null ?
                new ObjectParameter("FiscalYear", fiscalYear) :
                new ObjectParameter("FiscalYear", typeof(string));
    
            var clearingDocNumberParameter = clearingDocNumber != null ?
                new ObjectParameter("ClearingDocNumber", clearingDocNumber) :
                new ObjectParameter("ClearingDocNumber", typeof(string));
    
            var clearingDateParameter = clearingDate.HasValue ?
                new ObjectParameter("ClearingDate", clearingDate) :
                new ObjectParameter("ClearingDate", typeof(System.DateTime));
    
            var matDocGIParameter = matDocGI != null ?
                new ObjectParameter("MatDocGI", matDocGI) :
                new ObjectParameter("MatDocGI", typeof(string));
    
            var equipmentNumbParameter = equipmentNumb != null ?
                new ObjectParameter("EquipmentNumb", equipmentNumb) :
                new ObjectParameter("EquipmentNumb", typeof(string));
    
            var batchNumberParameter = batchNumber != null ?
                new ObjectParameter("BatchNumber", batchNumber) :
                new ObjectParameter("BatchNumber", typeof(string));
    
            var serialNumberParameter = serialNumber != null ?
                new ObjectParameter("SerialNumber", serialNumber) :
                new ObjectParameter("SerialNumber", typeof(string));
    
            var manSerialNumberParameter = manSerialNumber != null ?
                new ObjectParameter("ManSerialNumber", manSerialNumber) :
                new ObjectParameter("ManSerialNumber", typeof(string));
    
            var modelNumberParameter = modelNumber != null ?
                new ObjectParameter("ModelNumber", modelNumber) :
                new ObjectParameter("ModelNumber", typeof(string));
    
            var dateRecordCreatedParameter = dateRecordCreated.HasValue ?
                new ObjectParameter("DateRecordCreated", dateRecordCreated) :
                new ObjectParameter("DateRecordCreated", typeof(System.DateTime));
    
            var assetNumberParameter = assetNumber != null ?
                new ObjectParameter("AssetNumber", assetNumber) :
                new ObjectParameter("AssetNumber", typeof(string));
    
            var carSTNKParameter = carSTNK.HasValue ?
                new ObjectParameter("CarSTNK", carSTNK) :
                new ObjectParameter("CarSTNK", typeof(System.DateTime));
    
            var carRBentukParameter = carRBentuk != null ?
                new ObjectParameter("CarRBentuk", carRBentuk) :
                new ObjectParameter("CarRBentuk", typeof(string));
    
            var dateCarRBentukParameter = dateCarRBentuk.HasValue ?
                new ObjectParameter("DateCarRBentuk", dateCarRBentuk) :
                new ObjectParameter("DateCarRBentuk", typeof(System.DateTime));
    
            var carFakturParameter = carFaktur != null ?
                new ObjectParameter("CarFaktur", carFaktur) :
                new ObjectParameter("CarFaktur", typeof(string));
    
            var dateCarFakturParameter = dateCarFaktur.HasValue ?
                new ObjectParameter("DateCarFaktur", dateCarFaktur) :
                new ObjectParameter("DateCarFaktur", typeof(System.DateTime));
    
            var carFormAParameter = carFormA != null ?
                new ObjectParameter("CarFormA", carFormA) :
                new ObjectParameter("CarFormA", typeof(string));
    
            var dateCarFormAParameter = dateCarFormA.HasValue ?
                new ObjectParameter("DateCarFormA", dateCarFormA) :
                new ObjectParameter("DateCarFormA", typeof(System.DateTime));
    
            var carSertifParameter = carSertif != null ?
                new ObjectParameter("CarSertif", carSertif) :
                new ObjectParameter("CarSertif", typeof(string));
    
            var dateCarSertifParameter = dateCarSertif.HasValue ?
                new ObjectParameter("DateCarSertif", dateCarSertif) :
                new ObjectParameter("DateCarSertif", typeof(System.DateTime));
    
            var carRegUjiParameter = carRegUji != null ?
                new ObjectParameter("CarRegUji", carRegUji) :
                new ObjectParameter("CarRegUji", typeof(string));
    
            var carBPKBParameter = carBPKB != null ?
                new ObjectParameter("CarBPKB", carBPKB) :
                new ObjectParameter("CarBPKB", typeof(string));
    
            var statusCarBPKBParameter = statusCarBPKB != null ?
                new ObjectParameter("StatusCarBPKB", statusCarBPKB) :
                new ObjectParameter("StatusCarBPKB", typeof(string));
    
            var refDocNoParameter = refDocNo != null ?
                new ObjectParameter("RefDocNo", refDocNo) :
                new ObjectParameter("RefDocNo", typeof(string));
    
            var refKeyParameter = refKey != null ?
                new ObjectParameter("RefKey", refKey) :
                new ObjectParameter("RefKey", typeof(string));
    
            var pRSAPParameter = pRSAP != null ?
                new ObjectParameter("PRSAP", pRSAP) :
                new ObjectParameter("PRSAP", typeof(string));
    
            var pRDateParameter = pRDate.HasValue ?
                new ObjectParameter("PRDate", pRDate) :
                new ObjectParameter("PRDate", typeof(System.DateTime));
    
            var pRDeliveryDateParameter = pRDeliveryDate.HasValue ?
                new ObjectParameter("PRDeliveryDate", pRDeliveryDate) :
                new ObjectParameter("PRDeliveryDate", typeof(System.DateTime));
    
            var requesterNameParameter = requesterName != null ?
                new ObjectParameter("RequesterName", requesterName) :
                new ObjectParameter("RequesterName", typeof(string));
    
            var pRStatusParameter = pRStatus != null ?
                new ObjectParameter("PRStatus", pRStatus) :
                new ObjectParameter("PRStatus", typeof(string));
    
            var pRKaroseriParameter = pRKaroseri != null ?
                new ObjectParameter("PRKaroseri", pRKaroseri) :
                new ObjectParameter("PRKaroseri", typeof(string));
    
            var pRAccessoriesParameter = pRAccessories != null ?
                new ObjectParameter("PRAccessories", pRAccessories) :
                new ObjectParameter("PRAccessories", typeof(string));
    
            var processVKaroseriParameter = processVKaroseri != null ?
                new ObjectParameter("ProcessVKaroseri", processVKaroseri) :
                new ObjectParameter("ProcessVKaroseri", typeof(string));
    
            var processVAccsParameter = processVAccs != null ?
                new ObjectParameter("ProcessVAccs", processVAccs) :
                new ObjectParameter("ProcessVAccs", typeof(string));
    
            var customerParameter = customer != null ?
                new ObjectParameter("Customer", customer) :
                new ObjectParameter("Customer", typeof(string));
    
            var ontheRoadPriceParameter = ontheRoadPrice.HasValue ?
                new ObjectParameter("OntheRoadPrice", ontheRoadPrice) :
                new ObjectParameter("OntheRoadPrice", typeof(double));
    
            var promiseDeiveryDateParameter = promiseDeiveryDate.HasValue ?
                new ObjectParameter("PromiseDeiveryDate", promiseDeiveryDate) :
                new ObjectParameter("PromiseDeiveryDate", typeof(System.DateTime));
    
            var periodePOParameter = periodePO != null ?
                new ObjectParameter("PeriodePO", periodePO) :
                new ObjectParameter("PeriodePO", typeof(string));
    
            var officerNameParameter = officerName != null ?
                new ObjectParameter("OfficerName", officerName) :
                new ObjectParameter("OfficerName", typeof(string));
    
            var unitDeliveryAddressParameter = unitDeliveryAddress != null ?
                new ObjectParameter("UnitDeliveryAddress", unitDeliveryAddress) :
                new ObjectParameter("UnitDeliveryAddress", typeof(string));
    
            var pOStatusParameter = pOStatus != null ?
                new ObjectParameter("POStatus", pOStatus) :
                new ObjectParameter("POStatus", typeof(string));
    
            var schedItemParameter = schedItem.HasValue ?
                new ObjectParameter("SchedItem", schedItem) :
                new ObjectParameter("SchedItem", typeof(decimal));
    
            var schedDelvDateParameter = schedDelvDate.HasValue ?
                new ObjectParameter("SchedDelvDate", schedDelvDate) :
                new ObjectParameter("SchedDelvDate", typeof(System.DateTime));
    
            var bBNParameter = bBN != null ?
                new ObjectParameter("BBN", bBN) :
                new ObjectParameter("BBN", typeof(string));
    
            var merkParameter = merk != null ?
                new ObjectParameter("merk", merk) :
                new ObjectParameter("merk", typeof(string));
    
            var colorParameter = color != null ?
                new ObjectParameter("color", color) :
                new ObjectParameter("color", typeof(string));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var bentukAkhirUnitParameter = bentukAkhirUnit != null ?
                new ObjectParameter("BentukAkhirUnit", bentukAkhirUnit) :
                new ObjectParameter("BentukAkhirUnit", typeof(string));
    
            var gardanParameter = gardan != null ?
                new ObjectParameter("Gardan", gardan) :
                new ObjectParameter("Gardan", typeof(string));
    
            var salescontractNoParameter = salescontractNo != null ?
                new ObjectParameter("salescontractNo", salescontractNo) :
                new ObjectParameter("salescontractNo", typeof(string));
    
            var salescontractdateParameter = salescontractdate.HasValue ?
                new ObjectParameter("Salescontractdate", salescontractdate) :
                new ObjectParameter("Salescontractdate", typeof(System.DateTime));
    
            var customernameParameter = customername != null ?
                new ObjectParameter("Customername", customername) :
                new ObjectParameter("Customername", typeof(string));
    
            var tglpromisedeliverybpkbParameter = tglpromisedeliverybpkb != null ?
                new ObjectParameter("tglpromisedeliverybpkb", tglpromisedeliverybpkb) :
                new ObjectParameter("tglpromisedeliverybpkb", typeof(string));
    
            var textLine12Parameter = textLine12 != null ?
                new ObjectParameter("TextLine12", textLine12) :
                new ObjectParameter("TextLine12", typeof(string));
    
            var qCAppsParameter = qCApps != null ?
                new ObjectParameter("QCApps", qCApps) :
                new ObjectParameter("QCApps", typeof(string));
    
            var namaFileXLMLastUpdateParameter = namaFileXLMLastUpdate != null ?
                new ObjectParameter("NamaFileXLMLastUpdate", namaFileXLMLastUpdate) :
                new ObjectParameter("NamaFileXLMLastUpdate", typeof(string));
    
            var statusLogParameter = statusLog != null ?
                new ObjectParameter("StatusLog", statusLog) :
                new ObjectParameter("StatusLog", typeof(string));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_PARSINGXML_BAK", purcDocParameter, itemDocParameter, dateCreatedParameter, docTypeParameter, payTermParameter, vendorParameter, docDateParameter, changeDateParameter, materialParameter, matGroupParameter, docCondParameter, netPriceParameter, currParameter, pOQtyParameter, uoMParameter, infoRecordParameter, pRNumberParameter, compCodeParameter, compNameParameter, plantParameter, textParameter, flagDeleteParameter, name1Parameter, cityParameter, discPriceParameter, currDiscParameter, bBNPriceParameter, currBBNParameter, dPPPriceParameter, currDPPParameter, dLCPriceParameter, currDLCParameter, pPNPriceParameter, currPPNParameter, oPTPriceParameter, currOPTParameter, totalpaymentParameter, localpriceParameter, currencyParameter, itemTextParameter, textLineParameter, textLine2Parameter, textLine3Parameter, textLine4Parameter, textLine5Parameter, textLine6Parameter, textLine7Parameter, textLine8Parameter, textLine9Parameter, textLine10Parameter, textLine11Parameter, pRRelDateParameter, nameParameter, itemDelvDateParameter, itemDelvDate2Parameter, netprPurcInfoRecParameter, currNetprInfRecParameter, carDescParameter, carModelParameter, carTypeParameter, carBrandParameter, carTransmisiParameter, carSeriesParameter, carYearParameter, matDocParameter, matDocYearParameter, matDocItemParameter, postDateDocParameter, postDateDocBPKBParameter, accDocNumberParameter, fiscalYearParameter, clearingDocNumberParameter, clearingDateParameter, matDocGIParameter, equipmentNumbParameter, batchNumberParameter, serialNumberParameter, manSerialNumberParameter, modelNumberParameter, dateRecordCreatedParameter, assetNumberParameter, carSTNKParameter, carRBentukParameter, dateCarRBentukParameter, carFakturParameter, dateCarFakturParameter, carFormAParameter, dateCarFormAParameter, carSertifParameter, dateCarSertifParameter, carRegUjiParameter, carBPKBParameter, statusCarBPKBParameter, refDocNoParameter, refKeyParameter, pRSAPParameter, pRDateParameter, pRDeliveryDateParameter, requesterNameParameter, pRStatusParameter, pRKaroseriParameter, pRAccessoriesParameter, processVKaroseriParameter, processVAccsParameter, customerParameter, ontheRoadPriceParameter, promiseDeiveryDateParameter, periodePOParameter, officerNameParameter, unitDeliveryAddressParameter, pOStatusParameter, schedItemParameter, schedDelvDateParameter, bBNParameter, merkParameter, colorParameter, yearParameter, bentukAkhirUnitParameter, gardanParameter, salescontractNoParameter, salescontractdateParameter, customernameParameter, tglpromisedeliverybpkbParameter, textLine12Parameter, qCAppsParameter, namaFileXLMLastUpdateParameter, statusLogParameter, messageParameter);
        }
    
        public virtual int SP_PARSINGXML1(string purcDoc, string itemDoc, Nullable<System.DateTime> dateCreated, string docType, string payTerm, string vendor, Nullable<System.DateTime> docDate, Nullable<System.DateTime> changeDate, string material, string matGroup, string docCond, Nullable<double> netPrice, string curr, Nullable<double> pOQty, string uoM, string infoRecord, string pRNumber, string compCode, string compName, string plant, string text, string flagDelete, string name1, string city, Nullable<double> discPrice, string currDisc, string bBNPrice, string currBBN, string dPPPrice, string currDPP, string dLCPrice, string currDLC, string pPNPrice, string currPPN, string oPTPrice, string currOPT, Nullable<decimal> totalpayment, Nullable<decimal> localprice, string currency, string itemText, string textLine, string textLine2, string textLine3, string textLine4, string textLine5, string textLine6, string textLine7, string textLine8, string textLine9, string textLine10, string textLine11, Nullable<System.DateTime> pRRelDate, string name, Nullable<System.DateTime> itemDelvDate, Nullable<System.DateTime> itemDelvDate2, string netprPurcInfoRec, string currNetprInfRec, string carDesc, string carModel, string carType, string carBrand, string carTransmisi, string carSeries, string carYear, string matDoc, string matDocYear, Nullable<decimal> matDocItem, Nullable<System.DateTime> postDateDoc, Nullable<System.DateTime> postDateDocBPKB, string accDocNumber, string fiscalYear, string clearingDocNumber, Nullable<System.DateTime> clearingDate, string matDocGI, string equipmentNumb, string batchNumber, string serialNumber, string manSerialNumber, string modelNumber, Nullable<System.DateTime> dateRecordCreated, string assetNumber, Nullable<System.DateTime> carSTNK, string carRBentuk, Nullable<System.DateTime> dateCarRBentuk, string carFaktur, Nullable<System.DateTime> dateCarFaktur, string carFormA, Nullable<System.DateTime> dateCarFormA, string carSertif, Nullable<System.DateTime> dateCarSertif, string carRegUji, string carBPKB, string statusCarBPKB, string refDocNo, string refKey, string pRSAP, Nullable<System.DateTime> pRDate, Nullable<System.DateTime> pRDeliveryDate, string requesterName, string pRStatus, string pRKaroseri, string pRAccessories, string processVKaroseri, string processVAccs, string customer, Nullable<double> ontheRoadPrice, Nullable<System.DateTime> promiseDeiveryDate, string periodePO, string officerName, string unitDeliveryAddress, string pOStatus, Nullable<decimal> schedItem, Nullable<System.DateTime> schedDelvDate, string bBN, string merk, string color, string year, string bentukAkhirUnit, string gardan, string salescontractNo, Nullable<System.DateTime> salescontractdate, string customername, string tglpromisedeliverybpkb, string textLine12, string qCApps, string namaFileXLMLastUpdate, string statusLog, string message)
        {
            var purcDocParameter = purcDoc != null ?
                new ObjectParameter("PurcDoc", purcDoc) :
                new ObjectParameter("PurcDoc", typeof(string));
    
            var itemDocParameter = itemDoc != null ?
                new ObjectParameter("ItemDoc", itemDoc) :
                new ObjectParameter("ItemDoc", typeof(string));
    
            var dateCreatedParameter = dateCreated.HasValue ?
                new ObjectParameter("DateCreated", dateCreated) :
                new ObjectParameter("DateCreated", typeof(System.DateTime));
    
            var docTypeParameter = docType != null ?
                new ObjectParameter("DocType", docType) :
                new ObjectParameter("DocType", typeof(string));
    
            var payTermParameter = payTerm != null ?
                new ObjectParameter("PayTerm", payTerm) :
                new ObjectParameter("PayTerm", typeof(string));
    
            var vendorParameter = vendor != null ?
                new ObjectParameter("Vendor", vendor) :
                new ObjectParameter("Vendor", typeof(string));
    
            var docDateParameter = docDate.HasValue ?
                new ObjectParameter("DocDate", docDate) :
                new ObjectParameter("DocDate", typeof(System.DateTime));
    
            var changeDateParameter = changeDate.HasValue ?
                new ObjectParameter("ChangeDate", changeDate) :
                new ObjectParameter("ChangeDate", typeof(System.DateTime));
    
            var materialParameter = material != null ?
                new ObjectParameter("Material", material) :
                new ObjectParameter("Material", typeof(string));
    
            var matGroupParameter = matGroup != null ?
                new ObjectParameter("MatGroup", matGroup) :
                new ObjectParameter("MatGroup", typeof(string));
    
            var docCondParameter = docCond != null ?
                new ObjectParameter("DocCond", docCond) :
                new ObjectParameter("DocCond", typeof(string));
    
            var netPriceParameter = netPrice.HasValue ?
                new ObjectParameter("NetPrice", netPrice) :
                new ObjectParameter("NetPrice", typeof(double));
    
            var currParameter = curr != null ?
                new ObjectParameter("Curr", curr) :
                new ObjectParameter("Curr", typeof(string));
    
            var pOQtyParameter = pOQty.HasValue ?
                new ObjectParameter("POQty", pOQty) :
                new ObjectParameter("POQty", typeof(double));
    
            var uoMParameter = uoM != null ?
                new ObjectParameter("UoM", uoM) :
                new ObjectParameter("UoM", typeof(string));
    
            var infoRecordParameter = infoRecord != null ?
                new ObjectParameter("InfoRecord", infoRecord) :
                new ObjectParameter("InfoRecord", typeof(string));
    
            var pRNumberParameter = pRNumber != null ?
                new ObjectParameter("PRNumber", pRNumber) :
                new ObjectParameter("PRNumber", typeof(string));
    
            var compCodeParameter = compCode != null ?
                new ObjectParameter("CompCode", compCode) :
                new ObjectParameter("CompCode", typeof(string));
    
            var compNameParameter = compName != null ?
                new ObjectParameter("CompName", compName) :
                new ObjectParameter("CompName", typeof(string));
    
            var plantParameter = plant != null ?
                new ObjectParameter("Plant", plant) :
                new ObjectParameter("Plant", typeof(string));
    
            var textParameter = text != null ?
                new ObjectParameter("Text", text) :
                new ObjectParameter("Text", typeof(string));
    
            var flagDeleteParameter = flagDelete != null ?
                new ObjectParameter("FlagDelete", flagDelete) :
                new ObjectParameter("FlagDelete", typeof(string));
    
            var name1Parameter = name1 != null ?
                new ObjectParameter("Name1", name1) :
                new ObjectParameter("Name1", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var discPriceParameter = discPrice.HasValue ?
                new ObjectParameter("DiscPrice", discPrice) :
                new ObjectParameter("DiscPrice", typeof(double));
    
            var currDiscParameter = currDisc != null ?
                new ObjectParameter("CurrDisc", currDisc) :
                new ObjectParameter("CurrDisc", typeof(string));
    
            var bBNPriceParameter = bBNPrice != null ?
                new ObjectParameter("BBNPrice", bBNPrice) :
                new ObjectParameter("BBNPrice", typeof(string));
    
            var currBBNParameter = currBBN != null ?
                new ObjectParameter("CurrBBN", currBBN) :
                new ObjectParameter("CurrBBN", typeof(string));
    
            var dPPPriceParameter = dPPPrice != null ?
                new ObjectParameter("DPPPrice", dPPPrice) :
                new ObjectParameter("DPPPrice", typeof(string));
    
            var currDPPParameter = currDPP != null ?
                new ObjectParameter("CurrDPP", currDPP) :
                new ObjectParameter("CurrDPP", typeof(string));
    
            var dLCPriceParameter = dLCPrice != null ?
                new ObjectParameter("DLCPrice", dLCPrice) :
                new ObjectParameter("DLCPrice", typeof(string));
    
            var currDLCParameter = currDLC != null ?
                new ObjectParameter("CurrDLC", currDLC) :
                new ObjectParameter("CurrDLC", typeof(string));
    
            var pPNPriceParameter = pPNPrice != null ?
                new ObjectParameter("PPNPrice", pPNPrice) :
                new ObjectParameter("PPNPrice", typeof(string));
    
            var currPPNParameter = currPPN != null ?
                new ObjectParameter("CurrPPN", currPPN) :
                new ObjectParameter("CurrPPN", typeof(string));
    
            var oPTPriceParameter = oPTPrice != null ?
                new ObjectParameter("OPTPrice", oPTPrice) :
                new ObjectParameter("OPTPrice", typeof(string));
    
            var currOPTParameter = currOPT != null ?
                new ObjectParameter("CurrOPT", currOPT) :
                new ObjectParameter("CurrOPT", typeof(string));
    
            var totalpaymentParameter = totalpayment.HasValue ?
                new ObjectParameter("Totalpayment", totalpayment) :
                new ObjectParameter("Totalpayment", typeof(decimal));
    
            var localpriceParameter = localprice.HasValue ?
                new ObjectParameter("Localprice", localprice) :
                new ObjectParameter("Localprice", typeof(decimal));
    
            var currencyParameter = currency != null ?
                new ObjectParameter("Currency", currency) :
                new ObjectParameter("Currency", typeof(string));
    
            var itemTextParameter = itemText != null ?
                new ObjectParameter("ItemText", itemText) :
                new ObjectParameter("ItemText", typeof(string));
    
            var textLineParameter = textLine != null ?
                new ObjectParameter("TextLine", textLine) :
                new ObjectParameter("TextLine", typeof(string));
    
            var textLine2Parameter = textLine2 != null ?
                new ObjectParameter("TextLine2", textLine2) :
                new ObjectParameter("TextLine2", typeof(string));
    
            var textLine3Parameter = textLine3 != null ?
                new ObjectParameter("TextLine3", textLine3) :
                new ObjectParameter("TextLine3", typeof(string));
    
            var textLine4Parameter = textLine4 != null ?
                new ObjectParameter("TextLine4", textLine4) :
                new ObjectParameter("TextLine4", typeof(string));
    
            var textLine5Parameter = textLine5 != null ?
                new ObjectParameter("TextLine5", textLine5) :
                new ObjectParameter("TextLine5", typeof(string));
    
            var textLine6Parameter = textLine6 != null ?
                new ObjectParameter("TextLine6", textLine6) :
                new ObjectParameter("TextLine6", typeof(string));
    
            var textLine7Parameter = textLine7 != null ?
                new ObjectParameter("TextLine7", textLine7) :
                new ObjectParameter("TextLine7", typeof(string));
    
            var textLine8Parameter = textLine8 != null ?
                new ObjectParameter("TextLine8", textLine8) :
                new ObjectParameter("TextLine8", typeof(string));
    
            var textLine9Parameter = textLine9 != null ?
                new ObjectParameter("TextLine9", textLine9) :
                new ObjectParameter("TextLine9", typeof(string));
    
            var textLine10Parameter = textLine10 != null ?
                new ObjectParameter("TextLine10", textLine10) :
                new ObjectParameter("TextLine10", typeof(string));
    
            var textLine11Parameter = textLine11 != null ?
                new ObjectParameter("TextLine11", textLine11) :
                new ObjectParameter("TextLine11", typeof(string));
    
            var pRRelDateParameter = pRRelDate.HasValue ?
                new ObjectParameter("PRRelDate", pRRelDate) :
                new ObjectParameter("PRRelDate", typeof(System.DateTime));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var itemDelvDateParameter = itemDelvDate.HasValue ?
                new ObjectParameter("ItemDelvDate", itemDelvDate) :
                new ObjectParameter("ItemDelvDate", typeof(System.DateTime));
    
            var itemDelvDate2Parameter = itemDelvDate2.HasValue ?
                new ObjectParameter("ItemDelvDate2", itemDelvDate2) :
                new ObjectParameter("ItemDelvDate2", typeof(System.DateTime));
    
            var netprPurcInfoRecParameter = netprPurcInfoRec != null ?
                new ObjectParameter("NetprPurcInfoRec", netprPurcInfoRec) :
                new ObjectParameter("NetprPurcInfoRec", typeof(string));
    
            var currNetprInfRecParameter = currNetprInfRec != null ?
                new ObjectParameter("CurrNetprInfRec", currNetprInfRec) :
                new ObjectParameter("CurrNetprInfRec", typeof(string));
    
            var carDescParameter = carDesc != null ?
                new ObjectParameter("CarDesc", carDesc) :
                new ObjectParameter("CarDesc", typeof(string));
    
            var carModelParameter = carModel != null ?
                new ObjectParameter("CarModel", carModel) :
                new ObjectParameter("CarModel", typeof(string));
    
            var carTypeParameter = carType != null ?
                new ObjectParameter("CarType", carType) :
                new ObjectParameter("CarType", typeof(string));
    
            var carBrandParameter = carBrand != null ?
                new ObjectParameter("CarBrand", carBrand) :
                new ObjectParameter("CarBrand", typeof(string));
    
            var carTransmisiParameter = carTransmisi != null ?
                new ObjectParameter("CarTransmisi", carTransmisi) :
                new ObjectParameter("CarTransmisi", typeof(string));
    
            var carSeriesParameter = carSeries != null ?
                new ObjectParameter("CarSeries", carSeries) :
                new ObjectParameter("CarSeries", typeof(string));
    
            var carYearParameter = carYear != null ?
                new ObjectParameter("CarYear", carYear) :
                new ObjectParameter("CarYear", typeof(string));
    
            var matDocParameter = matDoc != null ?
                new ObjectParameter("MatDoc", matDoc) :
                new ObjectParameter("MatDoc", typeof(string));
    
            var matDocYearParameter = matDocYear != null ?
                new ObjectParameter("MatDocYear", matDocYear) :
                new ObjectParameter("MatDocYear", typeof(string));
    
            var matDocItemParameter = matDocItem.HasValue ?
                new ObjectParameter("MatDocItem", matDocItem) :
                new ObjectParameter("MatDocItem", typeof(decimal));
    
            var postDateDocParameter = postDateDoc.HasValue ?
                new ObjectParameter("PostDateDoc", postDateDoc) :
                new ObjectParameter("PostDateDoc", typeof(System.DateTime));
    
            var postDateDocBPKBParameter = postDateDocBPKB.HasValue ?
                new ObjectParameter("PostDateDocBPKB", postDateDocBPKB) :
                new ObjectParameter("PostDateDocBPKB", typeof(System.DateTime));
    
            var accDocNumberParameter = accDocNumber != null ?
                new ObjectParameter("AccDocNumber", accDocNumber) :
                new ObjectParameter("AccDocNumber", typeof(string));
    
            var fiscalYearParameter = fiscalYear != null ?
                new ObjectParameter("FiscalYear", fiscalYear) :
                new ObjectParameter("FiscalYear", typeof(string));
    
            var clearingDocNumberParameter = clearingDocNumber != null ?
                new ObjectParameter("ClearingDocNumber", clearingDocNumber) :
                new ObjectParameter("ClearingDocNumber", typeof(string));
    
            var clearingDateParameter = clearingDate.HasValue ?
                new ObjectParameter("ClearingDate", clearingDate) :
                new ObjectParameter("ClearingDate", typeof(System.DateTime));
    
            var matDocGIParameter = matDocGI != null ?
                new ObjectParameter("MatDocGI", matDocGI) :
                new ObjectParameter("MatDocGI", typeof(string));
    
            var equipmentNumbParameter = equipmentNumb != null ?
                new ObjectParameter("EquipmentNumb", equipmentNumb) :
                new ObjectParameter("EquipmentNumb", typeof(string));
    
            var batchNumberParameter = batchNumber != null ?
                new ObjectParameter("BatchNumber", batchNumber) :
                new ObjectParameter("BatchNumber", typeof(string));
    
            var serialNumberParameter = serialNumber != null ?
                new ObjectParameter("SerialNumber", serialNumber) :
                new ObjectParameter("SerialNumber", typeof(string));
    
            var manSerialNumberParameter = manSerialNumber != null ?
                new ObjectParameter("ManSerialNumber", manSerialNumber) :
                new ObjectParameter("ManSerialNumber", typeof(string));
    
            var modelNumberParameter = modelNumber != null ?
                new ObjectParameter("ModelNumber", modelNumber) :
                new ObjectParameter("ModelNumber", typeof(string));
    
            var dateRecordCreatedParameter = dateRecordCreated.HasValue ?
                new ObjectParameter("DateRecordCreated", dateRecordCreated) :
                new ObjectParameter("DateRecordCreated", typeof(System.DateTime));
    
            var assetNumberParameter = assetNumber != null ?
                new ObjectParameter("AssetNumber", assetNumber) :
                new ObjectParameter("AssetNumber", typeof(string));
    
            var carSTNKParameter = carSTNK.HasValue ?
                new ObjectParameter("CarSTNK", carSTNK) :
                new ObjectParameter("CarSTNK", typeof(System.DateTime));
    
            var carRBentukParameter = carRBentuk != null ?
                new ObjectParameter("CarRBentuk", carRBentuk) :
                new ObjectParameter("CarRBentuk", typeof(string));
    
            var dateCarRBentukParameter = dateCarRBentuk.HasValue ?
                new ObjectParameter("DateCarRBentuk", dateCarRBentuk) :
                new ObjectParameter("DateCarRBentuk", typeof(System.DateTime));
    
            var carFakturParameter = carFaktur != null ?
                new ObjectParameter("CarFaktur", carFaktur) :
                new ObjectParameter("CarFaktur", typeof(string));
    
            var dateCarFakturParameter = dateCarFaktur.HasValue ?
                new ObjectParameter("DateCarFaktur", dateCarFaktur) :
                new ObjectParameter("DateCarFaktur", typeof(System.DateTime));
    
            var carFormAParameter = carFormA != null ?
                new ObjectParameter("CarFormA", carFormA) :
                new ObjectParameter("CarFormA", typeof(string));
    
            var dateCarFormAParameter = dateCarFormA.HasValue ?
                new ObjectParameter("DateCarFormA", dateCarFormA) :
                new ObjectParameter("DateCarFormA", typeof(System.DateTime));
    
            var carSertifParameter = carSertif != null ?
                new ObjectParameter("CarSertif", carSertif) :
                new ObjectParameter("CarSertif", typeof(string));
    
            var dateCarSertifParameter = dateCarSertif.HasValue ?
                new ObjectParameter("DateCarSertif", dateCarSertif) :
                new ObjectParameter("DateCarSertif", typeof(System.DateTime));
    
            var carRegUjiParameter = carRegUji != null ?
                new ObjectParameter("CarRegUji", carRegUji) :
                new ObjectParameter("CarRegUji", typeof(string));
    
            var carBPKBParameter = carBPKB != null ?
                new ObjectParameter("CarBPKB", carBPKB) :
                new ObjectParameter("CarBPKB", typeof(string));
    
            var statusCarBPKBParameter = statusCarBPKB != null ?
                new ObjectParameter("StatusCarBPKB", statusCarBPKB) :
                new ObjectParameter("StatusCarBPKB", typeof(string));
    
            var refDocNoParameter = refDocNo != null ?
                new ObjectParameter("RefDocNo", refDocNo) :
                new ObjectParameter("RefDocNo", typeof(string));
    
            var refKeyParameter = refKey != null ?
                new ObjectParameter("RefKey", refKey) :
                new ObjectParameter("RefKey", typeof(string));
    
            var pRSAPParameter = pRSAP != null ?
                new ObjectParameter("PRSAP", pRSAP) :
                new ObjectParameter("PRSAP", typeof(string));
    
            var pRDateParameter = pRDate.HasValue ?
                new ObjectParameter("PRDate", pRDate) :
                new ObjectParameter("PRDate", typeof(System.DateTime));
    
            var pRDeliveryDateParameter = pRDeliveryDate.HasValue ?
                new ObjectParameter("PRDeliveryDate", pRDeliveryDate) :
                new ObjectParameter("PRDeliveryDate", typeof(System.DateTime));
    
            var requesterNameParameter = requesterName != null ?
                new ObjectParameter("RequesterName", requesterName) :
                new ObjectParameter("RequesterName", typeof(string));
    
            var pRStatusParameter = pRStatus != null ?
                new ObjectParameter("PRStatus", pRStatus) :
                new ObjectParameter("PRStatus", typeof(string));
    
            var pRKaroseriParameter = pRKaroseri != null ?
                new ObjectParameter("PRKaroseri", pRKaroseri) :
                new ObjectParameter("PRKaroseri", typeof(string));
    
            var pRAccessoriesParameter = pRAccessories != null ?
                new ObjectParameter("PRAccessories", pRAccessories) :
                new ObjectParameter("PRAccessories", typeof(string));
    
            var processVKaroseriParameter = processVKaroseri != null ?
                new ObjectParameter("ProcessVKaroseri", processVKaroseri) :
                new ObjectParameter("ProcessVKaroseri", typeof(string));
    
            var processVAccsParameter = processVAccs != null ?
                new ObjectParameter("ProcessVAccs", processVAccs) :
                new ObjectParameter("ProcessVAccs", typeof(string));
    
            var customerParameter = customer != null ?
                new ObjectParameter("Customer", customer) :
                new ObjectParameter("Customer", typeof(string));
    
            var ontheRoadPriceParameter = ontheRoadPrice.HasValue ?
                new ObjectParameter("OntheRoadPrice", ontheRoadPrice) :
                new ObjectParameter("OntheRoadPrice", typeof(double));
    
            var promiseDeiveryDateParameter = promiseDeiveryDate.HasValue ?
                new ObjectParameter("PromiseDeiveryDate", promiseDeiveryDate) :
                new ObjectParameter("PromiseDeiveryDate", typeof(System.DateTime));
    
            var periodePOParameter = periodePO != null ?
                new ObjectParameter("PeriodePO", periodePO) :
                new ObjectParameter("PeriodePO", typeof(string));
    
            var officerNameParameter = officerName != null ?
                new ObjectParameter("OfficerName", officerName) :
                new ObjectParameter("OfficerName", typeof(string));
    
            var unitDeliveryAddressParameter = unitDeliveryAddress != null ?
                new ObjectParameter("UnitDeliveryAddress", unitDeliveryAddress) :
                new ObjectParameter("UnitDeliveryAddress", typeof(string));
    
            var pOStatusParameter = pOStatus != null ?
                new ObjectParameter("POStatus", pOStatus) :
                new ObjectParameter("POStatus", typeof(string));
    
            var schedItemParameter = schedItem.HasValue ?
                new ObjectParameter("SchedItem", schedItem) :
                new ObjectParameter("SchedItem", typeof(decimal));
    
            var schedDelvDateParameter = schedDelvDate.HasValue ?
                new ObjectParameter("SchedDelvDate", schedDelvDate) :
                new ObjectParameter("SchedDelvDate", typeof(System.DateTime));
    
            var bBNParameter = bBN != null ?
                new ObjectParameter("BBN", bBN) :
                new ObjectParameter("BBN", typeof(string));
    
            var merkParameter = merk != null ?
                new ObjectParameter("merk", merk) :
                new ObjectParameter("merk", typeof(string));
    
            var colorParameter = color != null ?
                new ObjectParameter("color", color) :
                new ObjectParameter("color", typeof(string));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var bentukAkhirUnitParameter = bentukAkhirUnit != null ?
                new ObjectParameter("BentukAkhirUnit", bentukAkhirUnit) :
                new ObjectParameter("BentukAkhirUnit", typeof(string));
    
            var gardanParameter = gardan != null ?
                new ObjectParameter("Gardan", gardan) :
                new ObjectParameter("Gardan", typeof(string));
    
            var salescontractNoParameter = salescontractNo != null ?
                new ObjectParameter("salescontractNo", salescontractNo) :
                new ObjectParameter("salescontractNo", typeof(string));
    
            var salescontractdateParameter = salescontractdate.HasValue ?
                new ObjectParameter("Salescontractdate", salescontractdate) :
                new ObjectParameter("Salescontractdate", typeof(System.DateTime));
    
            var customernameParameter = customername != null ?
                new ObjectParameter("Customername", customername) :
                new ObjectParameter("Customername", typeof(string));
    
            var tglpromisedeliverybpkbParameter = tglpromisedeliverybpkb != null ?
                new ObjectParameter("tglpromisedeliverybpkb", tglpromisedeliverybpkb) :
                new ObjectParameter("tglpromisedeliverybpkb", typeof(string));
    
            var textLine12Parameter = textLine12 != null ?
                new ObjectParameter("TextLine12", textLine12) :
                new ObjectParameter("TextLine12", typeof(string));
    
            var qCAppsParameter = qCApps != null ?
                new ObjectParameter("QCApps", qCApps) :
                new ObjectParameter("QCApps", typeof(string));
    
            var namaFileXLMLastUpdateParameter = namaFileXLMLastUpdate != null ?
                new ObjectParameter("NamaFileXLMLastUpdate", namaFileXLMLastUpdate) :
                new ObjectParameter("NamaFileXLMLastUpdate", typeof(string));
    
            var statusLogParameter = statusLog != null ?
                new ObjectParameter("StatusLog", statusLog) :
                new ObjectParameter("StatusLog", typeof(string));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_PARSINGXML1", purcDocParameter, itemDocParameter, dateCreatedParameter, docTypeParameter, payTermParameter, vendorParameter, docDateParameter, changeDateParameter, materialParameter, matGroupParameter, docCondParameter, netPriceParameter, currParameter, pOQtyParameter, uoMParameter, infoRecordParameter, pRNumberParameter, compCodeParameter, compNameParameter, plantParameter, textParameter, flagDeleteParameter, name1Parameter, cityParameter, discPriceParameter, currDiscParameter, bBNPriceParameter, currBBNParameter, dPPPriceParameter, currDPPParameter, dLCPriceParameter, currDLCParameter, pPNPriceParameter, currPPNParameter, oPTPriceParameter, currOPTParameter, totalpaymentParameter, localpriceParameter, currencyParameter, itemTextParameter, textLineParameter, textLine2Parameter, textLine3Parameter, textLine4Parameter, textLine5Parameter, textLine6Parameter, textLine7Parameter, textLine8Parameter, textLine9Parameter, textLine10Parameter, textLine11Parameter, pRRelDateParameter, nameParameter, itemDelvDateParameter, itemDelvDate2Parameter, netprPurcInfoRecParameter, currNetprInfRecParameter, carDescParameter, carModelParameter, carTypeParameter, carBrandParameter, carTransmisiParameter, carSeriesParameter, carYearParameter, matDocParameter, matDocYearParameter, matDocItemParameter, postDateDocParameter, postDateDocBPKBParameter, accDocNumberParameter, fiscalYearParameter, clearingDocNumberParameter, clearingDateParameter, matDocGIParameter, equipmentNumbParameter, batchNumberParameter, serialNumberParameter, manSerialNumberParameter, modelNumberParameter, dateRecordCreatedParameter, assetNumberParameter, carSTNKParameter, carRBentukParameter, dateCarRBentukParameter, carFakturParameter, dateCarFakturParameter, carFormAParameter, dateCarFormAParameter, carSertifParameter, dateCarSertifParameter, carRegUjiParameter, carBPKBParameter, statusCarBPKBParameter, refDocNoParameter, refKeyParameter, pRSAPParameter, pRDateParameter, pRDeliveryDateParameter, requesterNameParameter, pRStatusParameter, pRKaroseriParameter, pRAccessoriesParameter, processVKaroseriParameter, processVAccsParameter, customerParameter, ontheRoadPriceParameter, promiseDeiveryDateParameter, periodePOParameter, officerNameParameter, unitDeliveryAddressParameter, pOStatusParameter, schedItemParameter, schedDelvDateParameter, bBNParameter, merkParameter, colorParameter, yearParameter, bentukAkhirUnitParameter, gardanParameter, salescontractNoParameter, salescontractdateParameter, customernameParameter, tglpromisedeliverybpkbParameter, textLine12Parameter, qCAppsParameter, namaFileXLMLastUpdateParameter, statusLogParameter, messageParameter);
        }
    
        public virtual int SP_PARSINGXMLMASTERMATERIAL(string materialNumber, string desc, string materialType, string materialGroup, string oldMaterial, string bomMaterial, string brand, string model, string gardan, string year, string purchaseGroup, string statusLog, string namaFileXLMLastUpdate, string message)
        {
            var materialNumberParameter = materialNumber != null ?
                new ObjectParameter("MaterialNumber", materialNumber) :
                new ObjectParameter("MaterialNumber", typeof(string));
    
            var descParameter = desc != null ?
                new ObjectParameter("Desc", desc) :
                new ObjectParameter("Desc", typeof(string));
    
            var materialTypeParameter = materialType != null ?
                new ObjectParameter("MaterialType", materialType) :
                new ObjectParameter("MaterialType", typeof(string));
    
            var materialGroupParameter = materialGroup != null ?
                new ObjectParameter("MaterialGroup", materialGroup) :
                new ObjectParameter("MaterialGroup", typeof(string));
    
            var oldMaterialParameter = oldMaterial != null ?
                new ObjectParameter("OldMaterial", oldMaterial) :
                new ObjectParameter("OldMaterial", typeof(string));
    
            var bomMaterialParameter = bomMaterial != null ?
                new ObjectParameter("BomMaterial", bomMaterial) :
                new ObjectParameter("BomMaterial", typeof(string));
    
            var brandParameter = brand != null ?
                new ObjectParameter("Brand", brand) :
                new ObjectParameter("Brand", typeof(string));
    
            var modelParameter = model != null ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(string));
    
            var gardanParameter = gardan != null ?
                new ObjectParameter("Gardan", gardan) :
                new ObjectParameter("Gardan", typeof(string));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var purchaseGroupParameter = purchaseGroup != null ?
                new ObjectParameter("PurchaseGroup", purchaseGroup) :
                new ObjectParameter("PurchaseGroup", typeof(string));
    
            var statusLogParameter = statusLog != null ?
                new ObjectParameter("StatusLog", statusLog) :
                new ObjectParameter("StatusLog", typeof(string));
    
            var namaFileXLMLastUpdateParameter = namaFileXLMLastUpdate != null ?
                new ObjectParameter("NamaFileXLMLastUpdate", namaFileXLMLastUpdate) :
                new ObjectParameter("NamaFileXLMLastUpdate", typeof(string));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_PARSINGXMLMASTERMATERIAL", materialNumberParameter, descParameter, materialTypeParameter, materialGroupParameter, oldMaterialParameter, bomMaterialParameter, brandParameter, modelParameter, gardanParameter, yearParameter, purchaseGroupParameter, statusLogParameter, namaFileXLMLastUpdateParameter, messageParameter);
        }
    
        public virtual int SP_PARSINGXMLMASTERPLANT(string plantID, string name, string alamat, string kelurahan, string kecamatan, string city, string region, string postalCode, string statusLog, string namaFileXLMLastUpdate, string message)
        {
            var plantIDParameter = plantID != null ?
                new ObjectParameter("PlantID", plantID) :
                new ObjectParameter("PlantID", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var alamatParameter = alamat != null ?
                new ObjectParameter("Alamat", alamat) :
                new ObjectParameter("Alamat", typeof(string));
    
            var kelurahanParameter = kelurahan != null ?
                new ObjectParameter("kelurahan", kelurahan) :
                new ObjectParameter("kelurahan", typeof(string));
    
            var kecamatanParameter = kecamatan != null ?
                new ObjectParameter("kecamatan", kecamatan) :
                new ObjectParameter("kecamatan", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var regionParameter = region != null ?
                new ObjectParameter("Region", region) :
                new ObjectParameter("Region", typeof(string));
    
            var postalCodeParameter = postalCode != null ?
                new ObjectParameter("PostalCode", postalCode) :
                new ObjectParameter("PostalCode", typeof(string));
    
            var statusLogParameter = statusLog != null ?
                new ObjectParameter("StatusLog", statusLog) :
                new ObjectParameter("StatusLog", typeof(string));
    
            var namaFileXLMLastUpdateParameter = namaFileXLMLastUpdate != null ?
                new ObjectParameter("NamaFileXLMLastUpdate", namaFileXLMLastUpdate) :
                new ObjectParameter("NamaFileXLMLastUpdate", typeof(string));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_PARSINGXMLMASTERPLANT", plantIDParameter, nameParameter, alamatParameter, kelurahanParameter, kecamatanParameter, cityParameter, regionParameter, postalCodeParameter, statusLogParameter, namaFileXLMLastUpdateParameter, messageParameter);
        }
    
        public virtual int SP_PARSINGXMLMASTERVENDOR(string vendorID, string vendorName, string street, string distric, string city, string postalCode, string telephone, string statusLog, string namaFileXLMLastUpdate, string message)
        {
            var vendorIDParameter = vendorID != null ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(string));
    
            var vendorNameParameter = vendorName != null ?
                new ObjectParameter("VendorName", vendorName) :
                new ObjectParameter("VendorName", typeof(string));
    
            var streetParameter = street != null ?
                new ObjectParameter("Street", street) :
                new ObjectParameter("Street", typeof(string));
    
            var districParameter = distric != null ?
                new ObjectParameter("Distric", distric) :
                new ObjectParameter("Distric", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var postalCodeParameter = postalCode != null ?
                new ObjectParameter("PostalCode", postalCode) :
                new ObjectParameter("PostalCode", typeof(string));
    
            var telephoneParameter = telephone != null ?
                new ObjectParameter("Telephone", telephone) :
                new ObjectParameter("Telephone", typeof(string));
    
            var statusLogParameter = statusLog != null ?
                new ObjectParameter("StatusLog", statusLog) :
                new ObjectParameter("StatusLog", typeof(string));
    
            var namaFileXLMLastUpdateParameter = namaFileXLMLastUpdate != null ?
                new ObjectParameter("NamaFileXLMLastUpdate", namaFileXLMLastUpdate) :
                new ObjectParameter("NamaFileXLMLastUpdate", typeof(string));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_PARSINGXMLMASTERVENDOR", vendorIDParameter, vendorNameParameter, streetParameter, districParameter, cityParameter, postalCodeParameter, telephoneParameter, statusLogParameter, namaFileXLMLastUpdateParameter, messageParameter);
        }
    
        public virtual ObjectResult<sp_PaymentSeraToAI_HS_Result> sp_PaymentSeraToAI_HS()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PaymentSeraToAI_HS_Result>("sp_PaymentSeraToAI_HS");
        }
    
        public virtual ObjectResult<sp_PaymentSeraToAI_IS_Result> sp_PaymentSeraToAI_IS()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PaymentSeraToAI_IS_Result>("sp_PaymentSeraToAI_IS");
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual ObjectResult<sp_SendActualReceiptInvoice_Result> sp_SendActualReceiptInvoice()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SendActualReceiptInvoice_Result>("sp_SendActualReceiptInvoice");
        }
    
        public virtual ObjectResult<Nullable<int>> sp_UpdateCustomPOStatusPOId(string pONUMBER, string pOSTATUSID)
        {
            var pONUMBERParameter = pONUMBER != null ?
                new ObjectParameter("PONUMBER", pONUMBER) :
                new ObjectParameter("PONUMBER", typeof(string));
    
            var pOSTATUSIDParameter = pOSTATUSID != null ?
                new ObjectParameter("POSTATUSID", pOSTATUSID) :
                new ObjectParameter("POSTATUSID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_UpdateCustomPOStatusPOId", pONUMBERParameter, pOSTATUSIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_UpdateDataForXml(string pono, Nullable<decimal> dataVersionS02002, Nullable<System.DateTime> downloadDateS02006, string xmlStatusIr)
        {
            var ponoParameter = pono != null ?
                new ObjectParameter("pono", pono) :
                new ObjectParameter("pono", typeof(string));
    
            var dataVersionS02002Parameter = dataVersionS02002.HasValue ?
                new ObjectParameter("dataVersionS02002", dataVersionS02002) :
                new ObjectParameter("dataVersionS02002", typeof(decimal));
    
            var downloadDateS02006Parameter = downloadDateS02006.HasValue ?
                new ObjectParameter("downloadDateS02006", downloadDateS02006) :
                new ObjectParameter("downloadDateS02006", typeof(System.DateTime));
    
            var xmlStatusIrParameter = xmlStatusIr != null ?
                new ObjectParameter("xmlStatusIr", xmlStatusIr) :
                new ObjectParameter("xmlStatusIr", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_UpdateDataForXml", ponoParameter, dataVersionS02002Parameter, downloadDateS02006Parameter, xmlStatusIrParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_UpdateS02002(string pONUMBER, Nullable<double> hARGADPP_INPUT, Nullable<double> hARGAPPNUNIT_INPUT, Nullable<double> hARGABBN_INPUT, string dONUMBER, Nullable<System.DateTime> dODATE, Nullable<System.DateTime> aCTUALDATEDELIVEREDUNIT, string nOCHASIS_INPUT, string nOENGINE_INPUT, string nOFAKTUR, Nullable<System.DateTime> tGLFAKTUR, string nOPOLISI_INPUT, Nullable<System.DateTime> tGLSTNK_INPUT, string nOSERTIFIKAT, Nullable<System.DateTime> tGLSERTIFIKAT, string nOFORMULIRA, Nullable<System.DateTime> tGLFORMULIRA, string nOSERTIFIKATREGUJITIPE, Nullable<System.DateTime> dATEDELIVERYTOBRANCHORVENDOR, string nOBPKB, string kETBPKB, Nullable<System.DateTime> rEVISEDATE)
        {
            var pONUMBERParameter = pONUMBER != null ?
                new ObjectParameter("PONUMBER", pONUMBER) :
                new ObjectParameter("PONUMBER", typeof(string));
    
            var hARGADPP_INPUTParameter = hARGADPP_INPUT.HasValue ?
                new ObjectParameter("HARGADPP_INPUT", hARGADPP_INPUT) :
                new ObjectParameter("HARGADPP_INPUT", typeof(double));
    
            var hARGAPPNUNIT_INPUTParameter = hARGAPPNUNIT_INPUT.HasValue ?
                new ObjectParameter("HARGAPPNUNIT_INPUT", hARGAPPNUNIT_INPUT) :
                new ObjectParameter("HARGAPPNUNIT_INPUT", typeof(double));
    
            var hARGABBN_INPUTParameter = hARGABBN_INPUT.HasValue ?
                new ObjectParameter("HARGABBN_INPUT", hARGABBN_INPUT) :
                new ObjectParameter("HARGABBN_INPUT", typeof(double));
    
            var dONUMBERParameter = dONUMBER != null ?
                new ObjectParameter("DONUMBER", dONUMBER) :
                new ObjectParameter("DONUMBER", typeof(string));
    
            var dODATEParameter = dODATE.HasValue ?
                new ObjectParameter("DODATE", dODATE) :
                new ObjectParameter("DODATE", typeof(System.DateTime));
    
            var aCTUALDATEDELIVEREDUNITParameter = aCTUALDATEDELIVEREDUNIT.HasValue ?
                new ObjectParameter("ACTUALDATEDELIVEREDUNIT", aCTUALDATEDELIVEREDUNIT) :
                new ObjectParameter("ACTUALDATEDELIVEREDUNIT", typeof(System.DateTime));
    
            var nOCHASIS_INPUTParameter = nOCHASIS_INPUT != null ?
                new ObjectParameter("NOCHASIS_INPUT", nOCHASIS_INPUT) :
                new ObjectParameter("NOCHASIS_INPUT", typeof(string));
    
            var nOENGINE_INPUTParameter = nOENGINE_INPUT != null ?
                new ObjectParameter("NOENGINE_INPUT", nOENGINE_INPUT) :
                new ObjectParameter("NOENGINE_INPUT", typeof(string));
    
            var nOFAKTURParameter = nOFAKTUR != null ?
                new ObjectParameter("NOFAKTUR", nOFAKTUR) :
                new ObjectParameter("NOFAKTUR", typeof(string));
    
            var tGLFAKTURParameter = tGLFAKTUR.HasValue ?
                new ObjectParameter("TGLFAKTUR", tGLFAKTUR) :
                new ObjectParameter("TGLFAKTUR", typeof(System.DateTime));
    
            var nOPOLISI_INPUTParameter = nOPOLISI_INPUT != null ?
                new ObjectParameter("NOPOLISI_INPUT", nOPOLISI_INPUT) :
                new ObjectParameter("NOPOLISI_INPUT", typeof(string));
    
            var tGLSTNK_INPUTParameter = tGLSTNK_INPUT.HasValue ?
                new ObjectParameter("TGLSTNK_INPUT", tGLSTNK_INPUT) :
                new ObjectParameter("TGLSTNK_INPUT", typeof(System.DateTime));
    
            var nOSERTIFIKATParameter = nOSERTIFIKAT != null ?
                new ObjectParameter("NOSERTIFIKAT", nOSERTIFIKAT) :
                new ObjectParameter("NOSERTIFIKAT", typeof(string));
    
            var tGLSERTIFIKATParameter = tGLSERTIFIKAT.HasValue ?
                new ObjectParameter("TGLSERTIFIKAT", tGLSERTIFIKAT) :
                new ObjectParameter("TGLSERTIFIKAT", typeof(System.DateTime));
    
            var nOFORMULIRAParameter = nOFORMULIRA != null ?
                new ObjectParameter("NOFORMULIRA", nOFORMULIRA) :
                new ObjectParameter("NOFORMULIRA", typeof(string));
    
            var tGLFORMULIRAParameter = tGLFORMULIRA.HasValue ?
                new ObjectParameter("TGLFORMULIRA", tGLFORMULIRA) :
                new ObjectParameter("TGLFORMULIRA", typeof(System.DateTime));
    
            var nOSERTIFIKATREGUJITIPEParameter = nOSERTIFIKATREGUJITIPE != null ?
                new ObjectParameter("NOSERTIFIKATREGUJITIPE", nOSERTIFIKATREGUJITIPE) :
                new ObjectParameter("NOSERTIFIKATREGUJITIPE", typeof(string));
    
            var dATEDELIVERYTOBRANCHORVENDORParameter = dATEDELIVERYTOBRANCHORVENDOR.HasValue ?
                new ObjectParameter("DATEDELIVERYTOBRANCHORVENDOR", dATEDELIVERYTOBRANCHORVENDOR) :
                new ObjectParameter("DATEDELIVERYTOBRANCHORVENDOR", typeof(System.DateTime));
    
            var nOBPKBParameter = nOBPKB != null ?
                new ObjectParameter("NOBPKB", nOBPKB) :
                new ObjectParameter("NOBPKB", typeof(string));
    
            var kETBPKBParameter = kETBPKB != null ?
                new ObjectParameter("KETBPKB", kETBPKB) :
                new ObjectParameter("KETBPKB", typeof(string));
    
            var rEVISEDATEParameter = rEVISEDATE.HasValue ?
                new ObjectParameter("REVISEDATE", rEVISEDATE) :
                new ObjectParameter("REVISEDATE", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_UpdateS02002", pONUMBERParameter, hARGADPP_INPUTParameter, hARGAPPNUNIT_INPUTParameter, hARGABBN_INPUTParameter, dONUMBERParameter, dODATEParameter, aCTUALDATEDELIVEREDUNITParameter, nOCHASIS_INPUTParameter, nOENGINE_INPUTParameter, nOFAKTURParameter, tGLFAKTURParameter, nOPOLISI_INPUTParameter, tGLSTNK_INPUTParameter, nOSERTIFIKATParameter, tGLSERTIFIKATParameter, nOFORMULIRAParameter, tGLFORMULIRAParameter, nOSERTIFIKATREGUJITIPEParameter, dATEDELIVERYTOBRANCHORVENDORParameter, nOBPKBParameter, kETBPKBParameter, rEVISEDATEParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_UpdateS02002_HS(string pONUMBER, Nullable<int> vERSIONPOSERA, Nullable<int> dATAVERSION, string sTATUSPOSERA, string rEJECTREVISEDPOSERA, string dOCUMENTNO, string aIMATERIALNUMBER, string sERAMATERIALNUMBER, string sERAMATERIALDESCRIPTION, string aICOLOR, string sERACOLOR, string qUOTATIONNO)
        {
            var pONUMBERParameter = pONUMBER != null ?
                new ObjectParameter("PONUMBER", pONUMBER) :
                new ObjectParameter("PONUMBER", typeof(string));
    
            var vERSIONPOSERAParameter = vERSIONPOSERA.HasValue ?
                new ObjectParameter("VERSIONPOSERA", vERSIONPOSERA) :
                new ObjectParameter("VERSIONPOSERA", typeof(int));
    
            var dATAVERSIONParameter = dATAVERSION.HasValue ?
                new ObjectParameter("DATAVERSION", dATAVERSION) :
                new ObjectParameter("DATAVERSION", typeof(int));
    
            var sTATUSPOSERAParameter = sTATUSPOSERA != null ?
                new ObjectParameter("STATUSPOSERA", sTATUSPOSERA) :
                new ObjectParameter("STATUSPOSERA", typeof(string));
    
            var rEJECTREVISEDPOSERAParameter = rEJECTREVISEDPOSERA != null ?
                new ObjectParameter("REJECTREVISEDPOSERA", rEJECTREVISEDPOSERA) :
                new ObjectParameter("REJECTREVISEDPOSERA", typeof(string));
    
            var dOCUMENTNOParameter = dOCUMENTNO != null ?
                new ObjectParameter("DOCUMENTNO", dOCUMENTNO) :
                new ObjectParameter("DOCUMENTNO", typeof(string));
    
            var aIMATERIALNUMBERParameter = aIMATERIALNUMBER != null ?
                new ObjectParameter("AIMATERIALNUMBER", aIMATERIALNUMBER) :
                new ObjectParameter("AIMATERIALNUMBER", typeof(string));
    
            var sERAMATERIALNUMBERParameter = sERAMATERIALNUMBER != null ?
                new ObjectParameter("SERAMATERIALNUMBER", sERAMATERIALNUMBER) :
                new ObjectParameter("SERAMATERIALNUMBER", typeof(string));
    
            var sERAMATERIALDESCRIPTIONParameter = sERAMATERIALDESCRIPTION != null ?
                new ObjectParameter("SERAMATERIALDESCRIPTION", sERAMATERIALDESCRIPTION) :
                new ObjectParameter("SERAMATERIALDESCRIPTION", typeof(string));
    
            var aICOLORParameter = aICOLOR != null ?
                new ObjectParameter("AICOLOR", aICOLOR) :
                new ObjectParameter("AICOLOR", typeof(string));
    
            var sERACOLORParameter = sERACOLOR != null ?
                new ObjectParameter("SERACOLOR", sERACOLOR) :
                new ObjectParameter("SERACOLOR", typeof(string));
    
            var qUOTATIONNOParameter = qUOTATIONNO != null ?
                new ObjectParameter("QUOTATIONNO", qUOTATIONNO) :
                new ObjectParameter("QUOTATIONNO", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_UpdateS02002_HS", pONUMBERParameter, vERSIONPOSERAParameter, dATAVERSIONParameter, sTATUSPOSERAParameter, rEJECTREVISEDPOSERAParameter, dOCUMENTNOParameter, aIMATERIALNUMBERParameter, sERAMATERIALNUMBERParameter, sERAMATERIALDESCRIPTIONParameter, aICOLORParameter, sERACOLORParameter, qUOTATIONNOParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_UpdateS02002_IS(string pONUMBER, Nullable<double> hARGADPP_INPUT, Nullable<double> hARGAPPNUNIT_INPUT, Nullable<double> hARGABBN_INPUT, string dONUMBER, Nullable<System.DateTime> dODATE, Nullable<System.DateTime> aCTUALDATEDELIVEREDUNIT, string nOCHASIS_INPUT, string nOENGINE_INPUT, string nOFAKTUR, Nullable<System.DateTime> tGLFAKTUR, string nOPOLISI_INPUT, Nullable<System.DateTime> tGLSTNK_INPUT, string nOSERTIFIKAT, Nullable<System.DateTime> tGLSERTIFIKAT, string nOFORMULIRA, Nullable<System.DateTime> tGLFORMULIRA, string nOSERTIFIKATREGUJITIPE, Nullable<System.DateTime> dATEDELIVERYTOBRANCHORVENDOR, string nOBPKB, string kETBPKB, Nullable<System.DateTime> rEVISEDATE, string sALESORDERNO, Nullable<bool> sALESORDERSTATUS, string cURRENCY, Nullable<int> yEAR, Nullable<bool> bILLINGSTATUS, string bSTKBNO, Nullable<System.DateTime> rEVISISTNK, string nAMAPENERIMA, string aLAMATPENERIMA)
        {
            var pONUMBERParameter = pONUMBER != null ?
                new ObjectParameter("PONUMBER", pONUMBER) :
                new ObjectParameter("PONUMBER", typeof(string));
    
            var hARGADPP_INPUTParameter = hARGADPP_INPUT.HasValue ?
                new ObjectParameter("HARGADPP_INPUT", hARGADPP_INPUT) :
                new ObjectParameter("HARGADPP_INPUT", typeof(double));
    
            var hARGAPPNUNIT_INPUTParameter = hARGAPPNUNIT_INPUT.HasValue ?
                new ObjectParameter("HARGAPPNUNIT_INPUT", hARGAPPNUNIT_INPUT) :
                new ObjectParameter("HARGAPPNUNIT_INPUT", typeof(double));
    
            var hARGABBN_INPUTParameter = hARGABBN_INPUT.HasValue ?
                new ObjectParameter("HARGABBN_INPUT", hARGABBN_INPUT) :
                new ObjectParameter("HARGABBN_INPUT", typeof(double));
    
            var dONUMBERParameter = dONUMBER != null ?
                new ObjectParameter("DONUMBER", dONUMBER) :
                new ObjectParameter("DONUMBER", typeof(string));
    
            var dODATEParameter = dODATE.HasValue ?
                new ObjectParameter("DODATE", dODATE) :
                new ObjectParameter("DODATE", typeof(System.DateTime));
    
            var aCTUALDATEDELIVEREDUNITParameter = aCTUALDATEDELIVEREDUNIT.HasValue ?
                new ObjectParameter("ACTUALDATEDELIVEREDUNIT", aCTUALDATEDELIVEREDUNIT) :
                new ObjectParameter("ACTUALDATEDELIVEREDUNIT", typeof(System.DateTime));
    
            var nOCHASIS_INPUTParameter = nOCHASIS_INPUT != null ?
                new ObjectParameter("NOCHASIS_INPUT", nOCHASIS_INPUT) :
                new ObjectParameter("NOCHASIS_INPUT", typeof(string));
    
            var nOENGINE_INPUTParameter = nOENGINE_INPUT != null ?
                new ObjectParameter("NOENGINE_INPUT", nOENGINE_INPUT) :
                new ObjectParameter("NOENGINE_INPUT", typeof(string));
    
            var nOFAKTURParameter = nOFAKTUR != null ?
                new ObjectParameter("NOFAKTUR", nOFAKTUR) :
                new ObjectParameter("NOFAKTUR", typeof(string));
    
            var tGLFAKTURParameter = tGLFAKTUR.HasValue ?
                new ObjectParameter("TGLFAKTUR", tGLFAKTUR) :
                new ObjectParameter("TGLFAKTUR", typeof(System.DateTime));
    
            var nOPOLISI_INPUTParameter = nOPOLISI_INPUT != null ?
                new ObjectParameter("NOPOLISI_INPUT", nOPOLISI_INPUT) :
                new ObjectParameter("NOPOLISI_INPUT", typeof(string));
    
            var tGLSTNK_INPUTParameter = tGLSTNK_INPUT.HasValue ?
                new ObjectParameter("TGLSTNK_INPUT", tGLSTNK_INPUT) :
                new ObjectParameter("TGLSTNK_INPUT", typeof(System.DateTime));
    
            var nOSERTIFIKATParameter = nOSERTIFIKAT != null ?
                new ObjectParameter("NOSERTIFIKAT", nOSERTIFIKAT) :
                new ObjectParameter("NOSERTIFIKAT", typeof(string));
    
            var tGLSERTIFIKATParameter = tGLSERTIFIKAT.HasValue ?
                new ObjectParameter("TGLSERTIFIKAT", tGLSERTIFIKAT) :
                new ObjectParameter("TGLSERTIFIKAT", typeof(System.DateTime));
    
            var nOFORMULIRAParameter = nOFORMULIRA != null ?
                new ObjectParameter("NOFORMULIRA", nOFORMULIRA) :
                new ObjectParameter("NOFORMULIRA", typeof(string));
    
            var tGLFORMULIRAParameter = tGLFORMULIRA.HasValue ?
                new ObjectParameter("TGLFORMULIRA", tGLFORMULIRA) :
                new ObjectParameter("TGLFORMULIRA", typeof(System.DateTime));
    
            var nOSERTIFIKATREGUJITIPEParameter = nOSERTIFIKATREGUJITIPE != null ?
                new ObjectParameter("NOSERTIFIKATREGUJITIPE", nOSERTIFIKATREGUJITIPE) :
                new ObjectParameter("NOSERTIFIKATREGUJITIPE", typeof(string));
    
            var dATEDELIVERYTOBRANCHORVENDORParameter = dATEDELIVERYTOBRANCHORVENDOR.HasValue ?
                new ObjectParameter("DATEDELIVERYTOBRANCHORVENDOR", dATEDELIVERYTOBRANCHORVENDOR) :
                new ObjectParameter("DATEDELIVERYTOBRANCHORVENDOR", typeof(System.DateTime));
    
            var nOBPKBParameter = nOBPKB != null ?
                new ObjectParameter("NOBPKB", nOBPKB) :
                new ObjectParameter("NOBPKB", typeof(string));
    
            var kETBPKBParameter = kETBPKB != null ?
                new ObjectParameter("KETBPKB", kETBPKB) :
                new ObjectParameter("KETBPKB", typeof(string));
    
            var rEVISEDATEParameter = rEVISEDATE.HasValue ?
                new ObjectParameter("REVISEDATE", rEVISEDATE) :
                new ObjectParameter("REVISEDATE", typeof(System.DateTime));
    
            var sALESORDERNOParameter = sALESORDERNO != null ?
                new ObjectParameter("SALESORDERNO", sALESORDERNO) :
                new ObjectParameter("SALESORDERNO", typeof(string));
    
            var sALESORDERSTATUSParameter = sALESORDERSTATUS.HasValue ?
                new ObjectParameter("SALESORDERSTATUS", sALESORDERSTATUS) :
                new ObjectParameter("SALESORDERSTATUS", typeof(bool));
    
            var cURRENCYParameter = cURRENCY != null ?
                new ObjectParameter("CURRENCY", cURRENCY) :
                new ObjectParameter("CURRENCY", typeof(string));
    
            var yEARParameter = yEAR.HasValue ?
                new ObjectParameter("YEAR", yEAR) :
                new ObjectParameter("YEAR", typeof(int));
    
            var bILLINGSTATUSParameter = bILLINGSTATUS.HasValue ?
                new ObjectParameter("BILLINGSTATUS", bILLINGSTATUS) :
                new ObjectParameter("BILLINGSTATUS", typeof(bool));
    
            var bSTKBNOParameter = bSTKBNO != null ?
                new ObjectParameter("BSTKBNO", bSTKBNO) :
                new ObjectParameter("BSTKBNO", typeof(string));
    
            var rEVISISTNKParameter = rEVISISTNK.HasValue ?
                new ObjectParameter("REVISISTNK", rEVISISTNK) :
                new ObjectParameter("REVISISTNK", typeof(System.DateTime));
    
            var nAMAPENERIMAParameter = nAMAPENERIMA != null ?
                new ObjectParameter("NAMAPENERIMA", nAMAPENERIMA) :
                new ObjectParameter("NAMAPENERIMA", typeof(string));
    
            var aLAMATPENERIMAParameter = aLAMATPENERIMA != null ?
                new ObjectParameter("ALAMATPENERIMA", aLAMATPENERIMA) :
                new ObjectParameter("ALAMATPENERIMA", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_UpdateS02002_IS", pONUMBERParameter, hARGADPP_INPUTParameter, hARGAPPNUNIT_INPUTParameter, hARGABBN_INPUTParameter, dONUMBERParameter, dODATEParameter, aCTUALDATEDELIVEREDUNITParameter, nOCHASIS_INPUTParameter, nOENGINE_INPUTParameter, nOFAKTURParameter, tGLFAKTURParameter, nOPOLISI_INPUTParameter, tGLSTNK_INPUTParameter, nOSERTIFIKATParameter, tGLSERTIFIKATParameter, nOFORMULIRAParameter, tGLFORMULIRAParameter, nOSERTIFIKATREGUJITIPEParameter, dATEDELIVERYTOBRANCHORVENDORParameter, nOBPKBParameter, kETBPKBParameter, rEVISEDATEParameter, sALESORDERNOParameter, sALESORDERSTATUSParameter, cURRENCYParameter, yEARParameter, bILLINGSTATUSParameter, bSTKBNOParameter, rEVISISTNKParameter, nAMAPENERIMAParameter, aLAMATPENERIMAParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_UpdateS02004(string pONUMBER, Nullable<decimal> vERSIONPOSERA, Nullable<decimal> dATAVERSION, string sTATUS, string rEASONREJECTION)
        {
            var pONUMBERParameter = pONUMBER != null ?
                new ObjectParameter("PONUMBER", pONUMBER) :
                new ObjectParameter("PONUMBER", typeof(string));
    
            var vERSIONPOSERAParameter = vERSIONPOSERA.HasValue ?
                new ObjectParameter("VERSIONPOSERA", vERSIONPOSERA) :
                new ObjectParameter("VERSIONPOSERA", typeof(decimal));
    
            var dATAVERSIONParameter = dATAVERSION.HasValue ?
                new ObjectParameter("DATAVERSION", dATAVERSION) :
                new ObjectParameter("DATAVERSION", typeof(decimal));
    
            var sTATUSParameter = sTATUS != null ?
                new ObjectParameter("STATUS", sTATUS) :
                new ObjectParameter("STATUS", typeof(string));
    
            var rEASONREJECTIONParameter = rEASONREJECTION != null ?
                new ObjectParameter("REASONREJECTION", rEASONREJECTION) :
                new ObjectParameter("REASONREJECTION", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_UpdateS02004", pONUMBERParameter, vERSIONPOSERAParameter, dATAVERSIONParameter, sTATUSParameter, rEASONREJECTIONParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_UpdateS02006(string pONUMBER, string nOFAKTUR, string iNVNO, Nullable<System.DateTime> iNVDATE, string nOFAKTURPAJAK, string nOCHASIS_INPUT, Nullable<decimal> nETPRICE, string bUSINESSAREACODE, string cUSTOMERNO, string nOMORSPES, string sALESORDERNO, string sALESMANNUMBER, Nullable<int> vERSIONPOSERA, string kUITANSINOREF, Nullable<System.DateTime> kUITANSIDATEREF, Nullable<System.DateTime> dOWNLOADDATE)
        {
            var pONUMBERParameter = pONUMBER != null ?
                new ObjectParameter("PONUMBER", pONUMBER) :
                new ObjectParameter("PONUMBER", typeof(string));
    
            var nOFAKTURParameter = nOFAKTUR != null ?
                new ObjectParameter("NOFAKTUR", nOFAKTUR) :
                new ObjectParameter("NOFAKTUR", typeof(string));
    
            var iNVNOParameter = iNVNO != null ?
                new ObjectParameter("INVNO", iNVNO) :
                new ObjectParameter("INVNO", typeof(string));
    
            var iNVDATEParameter = iNVDATE.HasValue ?
                new ObjectParameter("INVDATE", iNVDATE) :
                new ObjectParameter("INVDATE", typeof(System.DateTime));
    
            var nOFAKTURPAJAKParameter = nOFAKTURPAJAK != null ?
                new ObjectParameter("NOFAKTURPAJAK", nOFAKTURPAJAK) :
                new ObjectParameter("NOFAKTURPAJAK", typeof(string));
    
            var nOCHASIS_INPUTParameter = nOCHASIS_INPUT != null ?
                new ObjectParameter("NOCHASIS_INPUT", nOCHASIS_INPUT) :
                new ObjectParameter("NOCHASIS_INPUT", typeof(string));
    
            var nETPRICEParameter = nETPRICE.HasValue ?
                new ObjectParameter("NETPRICE", nETPRICE) :
                new ObjectParameter("NETPRICE", typeof(decimal));
    
            var bUSINESSAREACODEParameter = bUSINESSAREACODE != null ?
                new ObjectParameter("BUSINESSAREACODE", bUSINESSAREACODE) :
                new ObjectParameter("BUSINESSAREACODE", typeof(string));
    
            var cUSTOMERNOParameter = cUSTOMERNO != null ?
                new ObjectParameter("CUSTOMERNO", cUSTOMERNO) :
                new ObjectParameter("CUSTOMERNO", typeof(string));
    
            var nOMORSPESParameter = nOMORSPES != null ?
                new ObjectParameter("NOMORSPES", nOMORSPES) :
                new ObjectParameter("NOMORSPES", typeof(string));
    
            var sALESORDERNOParameter = sALESORDERNO != null ?
                new ObjectParameter("SALESORDERNO", sALESORDERNO) :
                new ObjectParameter("SALESORDERNO", typeof(string));
    
            var sALESMANNUMBERParameter = sALESMANNUMBER != null ?
                new ObjectParameter("SALESMANNUMBER", sALESMANNUMBER) :
                new ObjectParameter("SALESMANNUMBER", typeof(string));
    
            var vERSIONPOSERAParameter = vERSIONPOSERA.HasValue ?
                new ObjectParameter("VERSIONPOSERA", vERSIONPOSERA) :
                new ObjectParameter("VERSIONPOSERA", typeof(int));
    
            var kUITANSINOREFParameter = kUITANSINOREF != null ?
                new ObjectParameter("KUITANSINOREF", kUITANSINOREF) :
                new ObjectParameter("KUITANSINOREF", typeof(string));
    
            var kUITANSIDATEREFParameter = kUITANSIDATEREF.HasValue ?
                new ObjectParameter("KUITANSIDATEREF", kUITANSIDATEREF) :
                new ObjectParameter("KUITANSIDATEREF", typeof(System.DateTime));
    
            var dOWNLOADDATEParameter = dOWNLOADDATE.HasValue ?
                new ObjectParameter("DOWNLOADDATE", dOWNLOADDATE) :
                new ObjectParameter("DOWNLOADDATE", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_UpdateS02006", pONUMBERParameter, nOFAKTURParameter, iNVNOParameter, iNVDATEParameter, nOFAKTURPAJAKParameter, nOCHASIS_INPUTParameter, nETPRICEParameter, bUSINESSAREACODEParameter, cUSTOMERNOParameter, nOMORSPESParameter, sALESORDERNOParameter, sALESMANNUMBERParameter, vERSIONPOSERAParameter, kUITANSINOREFParameter, kUITANSIDATEREFParameter, dOWNLOADDATEParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_UpdateS02008(string pONUMBER, Nullable<int> vERSIONPOSERA, Nullable<int> dATAVERSION, string sALESORDERNO, string nOCHASIS_INPUT, Nullable<System.DateTime> tGLMASUKKAROSERI)
        {
            var pONUMBERParameter = pONUMBER != null ?
                new ObjectParameter("PONUMBER", pONUMBER) :
                new ObjectParameter("PONUMBER", typeof(string));
    
            var vERSIONPOSERAParameter = vERSIONPOSERA.HasValue ?
                new ObjectParameter("VERSIONPOSERA", vERSIONPOSERA) :
                new ObjectParameter("VERSIONPOSERA", typeof(int));
    
            var dATAVERSIONParameter = dATAVERSION.HasValue ?
                new ObjectParameter("DATAVERSION", dATAVERSION) :
                new ObjectParameter("DATAVERSION", typeof(int));
    
            var sALESORDERNOParameter = sALESORDERNO != null ?
                new ObjectParameter("SALESORDERNO", sALESORDERNO) :
                new ObjectParameter("SALESORDERNO", typeof(string));
    
            var nOCHASIS_INPUTParameter = nOCHASIS_INPUT != null ?
                new ObjectParameter("NOCHASIS_INPUT", nOCHASIS_INPUT) :
                new ObjectParameter("NOCHASIS_INPUT", typeof(string));
    
            var tGLMASUKKAROSERIParameter = tGLMASUKKAROSERI.HasValue ?
                new ObjectParameter("TGLMASUKKAROSERI", tGLMASUKKAROSERI) :
                new ObjectParameter("TGLMASUKKAROSERI", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_UpdateS02008", pONUMBERParameter, vERSIONPOSERAParameter, dATAVERSIONParameter, sALESORDERNOParameter, nOCHASIS_INPUTParameter, tGLMASUKKAROSERIParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int spCheckProposalHS()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCheckProposalHS");
        }
    
        public virtual int spCheckProposalIS()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCheckProposalIS");
        }
    
        public virtual int spCheckTempTableParsing()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCheckTempTableParsing");
        }
    
        public virtual ObjectResult<spGetVendorB2b_Result> spGetVendorB2b(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetVendorB2b_Result>("spGetVendorB2b", userIdParameter);
        }
    
        public virtual int spMergepayment(string data)
        {
            var dataParameter = data != null ?
                new ObjectParameter("data", data) :
                new ObjectParameter("data", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spMergepayment", dataParameter);
        }
    
        public virtual int spParsingXmlPaymentByMerge(string data, string client, string compCode, string fiscalYear, string proposalNumber, string documentNumber, string purchaseDocument, string item, Nullable<System.DateTime> appvDateTime, Nullable<System.DateTime> approveDate, Nullable<System.TimeSpan> approveTime, string namaFileXLMLastUpdate, string statusLog, string message)
        {
            var dataParameter = data != null ?
                new ObjectParameter("data", data) :
                new ObjectParameter("data", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var compCodeParameter = compCode != null ?
                new ObjectParameter("CompCode", compCode) :
                new ObjectParameter("CompCode", typeof(string));
    
            var fiscalYearParameter = fiscalYear != null ?
                new ObjectParameter("fiscalYear", fiscalYear) :
                new ObjectParameter("fiscalYear", typeof(string));
    
            var proposalNumberParameter = proposalNumber != null ?
                new ObjectParameter("ProposalNumber", proposalNumber) :
                new ObjectParameter("ProposalNumber", typeof(string));
    
            var documentNumberParameter = documentNumber != null ?
                new ObjectParameter("DocumentNumber", documentNumber) :
                new ObjectParameter("DocumentNumber", typeof(string));
    
            var purchaseDocumentParameter = purchaseDocument != null ?
                new ObjectParameter("PurchaseDocument", purchaseDocument) :
                new ObjectParameter("PurchaseDocument", typeof(string));
    
            var itemParameter = item != null ?
                new ObjectParameter("Item", item) :
                new ObjectParameter("Item", typeof(string));
    
            var appvDateTimeParameter = appvDateTime.HasValue ?
                new ObjectParameter("appvDateTime", appvDateTime) :
                new ObjectParameter("appvDateTime", typeof(System.DateTime));
    
            var approveDateParameter = approveDate.HasValue ?
                new ObjectParameter("ApproveDate", approveDate) :
                new ObjectParameter("ApproveDate", typeof(System.DateTime));
    
            var approveTimeParameter = approveTime.HasValue ?
                new ObjectParameter("ApproveTime", approveTime) :
                new ObjectParameter("ApproveTime", typeof(System.TimeSpan));
    
            var namaFileXLMLastUpdateParameter = namaFileXLMLastUpdate != null ?
                new ObjectParameter("NamaFileXLMLastUpdate", namaFileXLMLastUpdate) :
                new ObjectParameter("NamaFileXLMLastUpdate", typeof(string));
    
            var statusLogParameter = statusLog != null ?
                new ObjectParameter("StatusLog", statusLog) :
                new ObjectParameter("StatusLog", typeof(string));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spParsingXmlPaymentByMerge", dataParameter, clientParameter, compCodeParameter, fiscalYearParameter, proposalNumberParameter, documentNumberParameter, purchaseDocumentParameter, itemParameter, appvDateTimeParameter, approveDateParameter, approveTimeParameter, namaFileXLMLastUpdateParameter, statusLogParameter, messageParameter);
        }
    
        public virtual int spUpdateFlagRejectionByS02005(string pONUMBER)
        {
            var pONUMBERParameter = pONUMBER != null ?
                new ObjectParameter("PONUMBER", pONUMBER) :
                new ObjectParameter("PONUMBER", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateFlagRejectionByS02005", pONUMBERParameter);
        }
    }
}
